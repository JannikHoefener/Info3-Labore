
Pomodoro-Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000045c  00800100  0000136a  000013fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000136a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080055c  0080055c  0000185a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000185a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145a  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ce  00000000  00000000  00002e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bae  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  000043a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011da  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005f42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 00 	jmp	0x102	; 0x102 <__ctors_end>
       4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
       8:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
       c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      10:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_4>
      14:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_5>
      18:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      1c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_7>
      20:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      24:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      28:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      2c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      30:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      38:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_14>
      3c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      40:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      44:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      4c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      50:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      54:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      58:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      5c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      60:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      64:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
      68:	b5 05       	cpc	r27, r5
      6a:	b7 05       	cpc	r27, r7
      6c:	b7 05       	cpc	r27, r7
      6e:	b7 05       	cpc	r27, r7
      70:	b7 05       	cpc	r27, r7
      72:	b7 05       	cpc	r27, r7
      74:	b7 05       	cpc	r27, r7
      76:	b7 05       	cpc	r27, r7
      78:	b7 05       	cpc	r27, r7
      7a:	b7 05       	cpc	r27, r7
      7c:	b7 05       	cpc	r27, r7
      7e:	b7 05       	cpc	r27, r7
      80:	b7 05       	cpc	r27, r7
      82:	b7 05       	cpc	r27, r7
      84:	b7 05       	cpc	r27, r7
      86:	b7 05       	cpc	r27, r7
      88:	b7 05       	cpc	r27, r7
      8a:	b7 05       	cpc	r27, r7
      8c:	b7 05       	cpc	r27, r7
      8e:	b7 05       	cpc	r27, r7
      90:	ad 05       	cpc	r26, r13
      92:	b7 05       	cpc	r27, r7
      94:	b7 05       	cpc	r27, r7
      96:	b7 05       	cpc	r27, r7
      98:	b7 05       	cpc	r27, r7
      9a:	b7 05       	cpc	r27, r7
      9c:	b7 05       	cpc	r27, r7
      9e:	b7 05       	cpc	r27, r7
      a0:	b7 05       	cpc	r27, r7
      a2:	b7 05       	cpc	r27, r7
      a4:	b7 05       	cpc	r27, r7
      a6:	b7 05       	cpc	r27, r7
      a8:	b7 05       	cpc	r27, r7
      aa:	b7 05       	cpc	r27, r7
      ac:	b7 05       	cpc	r27, r7
      ae:	b7 05       	cpc	r27, r7
      b0:	b7 05       	cpc	r27, r7
      b2:	b7 05       	cpc	r27, r7
      b4:	af 05       	cpc	r26, r15
      b6:	b7 05       	cpc	r27, r7
      b8:	b7 05       	cpc	r27, r7
      ba:	b7 05       	cpc	r27, r7
      bc:	b7 05       	cpc	r27, r7
      be:	b7 05       	cpc	r27, r7
      c0:	b1 05       	cpc	r27, r1
      c2:	b7 05       	cpc	r27, r7
      c4:	b7 05       	cpc	r27, r7
      c6:	b3 05       	cpc	r27, r3
      c8:	b7 05       	cpc	r27, r7
      ca:	b7 05       	cpc	r27, r7
      cc:	b7 05       	cpc	r27, r7
      ce:	b7 05       	cpc	r27, r7
      d0:	a9 05       	cpc	r26, r9
      d2:	b7 05       	cpc	r27, r7
      d4:	b7 05       	cpc	r27, r7
      d6:	b7 05       	cpc	r27, r7
      d8:	b7 05       	cpc	r27, r7
      da:	b7 05       	cpc	r27, r7
      dc:	b7 05       	cpc	r27, r7
      de:	b7 05       	cpc	r27, r7
      e0:	b7 05       	cpc	r27, r7
      e2:	b7 05       	cpc	r27, r7
      e4:	b7 05       	cpc	r27, r7
      e6:	b7 05       	cpc	r27, r7
      e8:	b7 05       	cpc	r27, r7
      ea:	b7 05       	cpc	r27, r7
      ec:	b7 05       	cpc	r27, r7
      ee:	b7 05       	cpc	r27, r7
      f0:	b7 05       	cpc	r27, r7
      f2:	b7 05       	cpc	r27, r7
      f4:	b9 05       	cpc	r27, r9
      f6:	b7 05       	cpc	r27, r7
      f8:	b7 05       	cpc	r27, r7
      fa:	b7 05       	cpc	r27, r7
      fc:	b7 05       	cpc	r27, r7
      fe:	b7 05       	cpc	r27, r7
     100:	ab 05       	cpc	r26, r11

00000102 <__ctors_end>:
     102:	11 24       	eor	r1, r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	cf ef       	ldi	r28, 0xFF	; 255
     108:	d8 e0       	ldi	r29, 0x08	; 8
     10a:	de bf       	out	0x3e, r29	; 62
     10c:	cd bf       	out	0x3d, r28	; 61

0000010e <__do_copy_data>:
     10e:	15 e0       	ldi	r17, 0x05	; 5
     110:	a0 e0       	ldi	r26, 0x00	; 0
     112:	b1 e0       	ldi	r27, 0x01	; 1
     114:	ea e6       	ldi	r30, 0x6A	; 106
     116:	f3 e1       	ldi	r31, 0x13	; 19
     118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x10>
     11a:	05 90       	lpm	r0, Z+
     11c:	0d 92       	st	X+, r0
     11e:	ac 35       	cpi	r26, 0x5C	; 92
     120:	b1 07       	cpc	r27, r17
     122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0xc>

00000124 <__do_clear_bss>:
     124:	25 e0       	ldi	r18, 0x05	; 5
     126:	ac e5       	ldi	r26, 0x5C	; 92
     128:	b5 e0       	ldi	r27, 0x05	; 5
     12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
     12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
     12e:	a3 36       	cpi	r26, 0x63	; 99
     130:	b2 07       	cpc	r27, r18
     132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
     134:	0e 94 95 04 	call	0x92a	; 0x92a <main>
     138:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <_exit>

0000013c <__bad_interrupt>:
     13c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000140 <SPI_init>:
// Messwert für ca 20 cm laut Oszi ebenfalls 19,9 ms High

void SPI_init()
{
	//set CS, MOSI and SCK to output
	SPI_DDR |= (1 << CS) | (1 << MOSI) | (1 << SCK);
     140:	84 b1       	in	r24, 0x04	; 4
     142:	8c 62       	ori	r24, 0x2C	; 44
     144:	84 b9       	out	0x04, r24	; 4

	//enable SPI, set as master, and clock to fosc/4 or 128
	SPCR = (1 << SPE) | (1 << MSTR);// | (1 << SPR1) | (1 << SPR0); 4MHz bzw. 125kHz
     146:	80 e5       	ldi	r24, 0x50	; 80
     148:	8c bd       	out	0x2c, r24	; 44
     14a:	08 95       	ret

0000014c <SPISend8Bit>:
	//SPSR |= 0x1;
}

void SPISend8Bit(uint8_t data){
	PORTB &= ~(1<<CS);				//CS low
     14c:	95 b1       	in	r25, 0x05	; 5
     14e:	9b 7f       	andi	r25, 0xFB	; 251
     150:	95 b9       	out	0x05, r25	; 5
	SPDR = data;					//load data into register
     152:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));	//wait for transmission complete
     154:	0d b4       	in	r0, 0x2d	; 45
     156:	07 fe       	sbrs	r0, 7
     158:	fd cf       	rjmp	.-6      	; 0x154 <SPISend8Bit+0x8>
	PORTB |= (1<<CS);				//CS high
     15a:	85 b1       	in	r24, 0x05	; 5
     15c:	84 60       	ori	r24, 0x04	; 4
     15e:	85 b9       	out	0x05, r24	; 5
     160:	08 95       	ret

00000162 <Display_init>:
}

void Display_init(void) {
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	c2 55       	subi	r28, 0x52	; 82
     16c:	d1 09       	sbc	r29, r1
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
	uint16_t InitData[] ={
     178:	82 e5       	ldi	r24, 0x52	; 82
     17a:	e7 e0       	ldi	r30, 0x07	; 7
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	de 01       	movw	r26, r28
     180:	11 96       	adiw	r26, 0x01	; 1
     182:	01 90       	ld	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	8a 95       	dec	r24
     188:	e1 f7       	brne	.-8      	; 0x182 <Display_init+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	85 ea       	ldi	r24, 0xA5	; 165
     18e:	9e e0       	ldi	r25, 0x0E	; 14
     190:	21 50       	subi	r18, 0x01	; 1
     192:	80 40       	sbci	r24, 0x00	; 0
     194:	90 40       	sbci	r25, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <Display_init+0x2e>
     198:	00 c0       	rjmp	.+0      	; 0x19a <Display_init+0x38>
     19a:	00 00       	nop
		0xEF08,	0x1805,	0x1283, 0x1500,	0x1300,
		0x16AF 	//Querformat 176 x 132 Pixel
	};
	
	_delay_ms(300);
	PORTD &= !(1<<Reset);	//Reset-Eingang des Displays auf Low => Beginn Hardware-Reset
     19c:	8b b1       	in	r24, 0x0b	; 11
     19e:	1b b8       	out	0x0b, r1	; 11
     1a0:	2f e7       	ldi	r18, 0x7F	; 127
     1a2:	89 ea       	ldi	r24, 0xA9	; 169
     1a4:	93 e0       	ldi	r25, 0x03	; 3
     1a6:	21 50       	subi	r18, 0x01	; 1
     1a8:	80 40       	sbci	r24, 0x00	; 0
     1aa:	90 40       	sbci	r25, 0x00	; 0
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <Display_init+0x44>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <Display_init+0x4e>
     1b0:	00 00       	nop
	_delay_ms(75);
	PORTB |= (1<<CS);		//SSEL auf High
     1b2:	85 b1       	in	r24, 0x05	; 5
     1b4:	84 60       	ori	r24, 0x04	; 4
     1b6:	85 b9       	out	0x05, r24	; 5
     1b8:	2f e7       	ldi	r18, 0x7F	; 127
     1ba:	89 ea       	ldi	r24, 0xA9	; 169
     1bc:	93 e0       	ldi	r25, 0x03	; 3
     1be:	21 50       	subi	r18, 0x01	; 1
     1c0:	80 40       	sbci	r24, 0x00	; 0
     1c2:	90 40       	sbci	r25, 0x00	; 0
     1c4:	e1 f7       	brne	.-8      	; 0x1be <Display_init+0x5c>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Display_init+0x66>
     1c8:	00 00       	nop
	_delay_ms(75);
	PORTD |= (1<<D_C);		//Data/Command auf High
     1ca:	8b b1       	in	r24, 0x0b	; 11
     1cc:	84 60       	ori	r24, 0x04	; 4
     1ce:	8b b9       	out	0x0b, r24	; 11
     1d0:	2f e7       	ldi	r18, 0x7F	; 127
     1d2:	89 ea       	ldi	r24, 0xA9	; 169
     1d4:	93 e0       	ldi	r25, 0x03	; 3
     1d6:	21 50       	subi	r18, 0x01	; 1
     1d8:	80 40       	sbci	r24, 0x00	; 0
     1da:	90 40       	sbci	r25, 0x00	; 0
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <Display_init+0x74>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <Display_init+0x7e>
     1e0:	00 00       	nop
	_delay_ms(75);
	PORTD |= (1<<Reset);	//Reset-Eingang des Displays auf High => Ende Hardware Reset
     1e2:	8b b1       	in	r24, 0x0b	; 11
     1e4:	88 60       	ori	r24, 0x08	; 8
     1e6:	8b b9       	out	0x0b, r24	; 11
     1e8:	2f e7       	ldi	r18, 0x7F	; 127
     1ea:	89 ea       	ldi	r24, 0xA9	; 169
     1ec:	93 e0       	ldi	r25, 0x03	; 3
     1ee:	21 50       	subi	r18, 0x01	; 1
     1f0:	80 40       	sbci	r24, 0x00	; 0
     1f2:	90 40       	sbci	r25, 0x00	; 0
     1f4:	e1 f7       	brne	.-8      	; 0x1ee <Display_init+0x8c>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <Display_init+0x96>
     1f8:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[0], 2);
     1fa:	62 e0       	ldi	r22, 0x02	; 2
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	ce 01       	movw	r24, r28
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	0e 94 ae 04 	call	0x95c	; 0x95c <SendCommandSeq>
     206:	2f e7       	ldi	r18, 0x7F	; 127
     208:	89 ea       	ldi	r24, 0xA9	; 169
     20a:	93 e0       	ldi	r25, 0x03	; 3
     20c:	21 50       	subi	r18, 0x01	; 1
     20e:	80 40       	sbci	r24, 0x00	; 0
     210:	90 40       	sbci	r25, 0x00	; 0
     212:	e1 f7       	brne	.-8      	; 0x20c <Display_init+0xaa>
     214:	00 c0       	rjmp	.+0      	; 0x216 <Display_init+0xb4>
     216:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[2], 10);
     218:	6a e0       	ldi	r22, 0x0A	; 10
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	ce 01       	movw	r24, r28
     21e:	05 96       	adiw	r24, 0x05	; 5
     220:	0e 94 ae 04 	call	0x95c	; 0x95c <SendCommandSeq>
     224:	2f e7       	ldi	r18, 0x7F	; 127
     226:	89 ea       	ldi	r24, 0xA9	; 169
     228:	93 e0       	ldi	r25, 0x03	; 3
     22a:	21 50       	subi	r18, 0x01	; 1
     22c:	80 40       	sbci	r24, 0x00	; 0
     22e:	90 40       	sbci	r25, 0x00	; 0
     230:	e1 f7       	brne	.-8      	; 0x22a <Display_init+0xc8>
     232:	00 c0       	rjmp	.+0      	; 0x234 <Display_init+0xd2>
     234:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[12], 23);
     236:	67 e1       	ldi	r22, 0x17	; 23
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	ce 01       	movw	r24, r28
     23c:	49 96       	adiw	r24, 0x19	; 25
     23e:	0e 94 ae 04 	call	0x95c	; 0x95c <SendCommandSeq>
     242:	2f e7       	ldi	r18, 0x7F	; 127
     244:	89 ea       	ldi	r24, 0xA9	; 169
     246:	93 e0       	ldi	r25, 0x03	; 3
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	80 40       	sbci	r24, 0x00	; 0
     24c:	90 40       	sbci	r25, 0x00	; 0
     24e:	e1 f7       	brne	.-8      	; 0x248 <Display_init+0xe6>
     250:	00 c0       	rjmp	.+0      	; 0x252 <Display_init+0xf0>
     252:	00 00       	nop
	_delay_ms(75);
	SendCommandSeq(&InitData[35], 6);
     254:	66 e0       	ldi	r22, 0x06	; 6
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	ce 01       	movw	r24, r28
     25a:	89 5b       	subi	r24, 0xB9	; 185
     25c:	9f 4f       	sbci	r25, 0xFF	; 255
     25e:	0e 94 ae 04 	call	0x95c	; 0x95c <SendCommandSeq>
}
     262:	ce 5a       	subi	r28, 0xAE	; 174
     264:	df 4f       	sbci	r29, 0xFF	; 255
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <init>:

void init(void){
     276:	cf 92       	push	r12
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	2f 97       	sbiw	r28, 0x0f	; 15
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	a8 95       	wdr
     29a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     29e:	88 61       	ori	r24, 0x18	; 24
     2a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     2a8:	0f be       	out	0x3f, r0	; 63
	wdt_disable();
	// alles was einmal zum start erledigt werden muss
	DDRD |= (1<<D_C)|(1<<Reset);		//output: PD2 -> Data/Command; PD3 -> Reset
     2aa:	8a b1       	in	r24, 0x0a	; 10
     2ac:	8c 60       	ori	r24, 0x0C	; 12
     2ae:	8a b9       	out	0x0a, r24	; 10
	SPI_init();
     2b0:	0e 94 a0 00 	call	0x140	; 0x140 <SPI_init>
	sei();
     2b4:	78 94       	sei
	Display_init();
     2b6:	0e 94 b1 00 	call	0x162	; 0x162 <Display_init>
	//Display-Hintergrundfarbe übertragen:
	int x;
	for(x=0; x<23232; x++){
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	10 e0       	ldi	r17, 0x00	; 0
     2be:	08 c0       	rjmp	.+16     	; 0x2d0 <init+0x5a>
		SPISend8Bit(0xFF); 				//senden von 1. 8-Bit-Wert für weiß
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	0e 94 a6 00 	call	0x14c	; 0x14c <SPISend8Bit>
		SPISend8Bit(0xFF); 				//senden von 2. 8-Bit-Wert für weiß
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	0e 94 a6 00 	call	0x14c	; 0x14c <SPISend8Bit>
	SPI_init();
	sei();
	Display_init();
	//Display-Hintergrundfarbe übertragen:
	int x;
	for(x=0; x<23232; x++){
     2cc:	0f 5f       	subi	r16, 0xFF	; 255
     2ce:	1f 4f       	sbci	r17, 0xFF	; 255
     2d0:	00 3c       	cpi	r16, 0xC0	; 192
     2d2:	8a e5       	ldi	r24, 0x5A	; 90
     2d4:	18 07       	cpc	r17, r24
     2d6:	a4 f3       	brlt	.-24     	; 0x2c0 <init+0x4a>
		SPISend8Bit(0xFF); 				//senden von 1. 8-Bit-Wert für weiß
		SPISend8Bit(0xFF); 				//senden von 2. 8-Bit-Wert für weiß
	}
	// Übertragen der Überschrift auf das Display
	char mytext[]  = "Pomodoro-Timer";
     2d8:	8f e0       	ldi	r24, 0x0F	; 15
     2da:	e5 e6       	ldi	r30, 0x65	; 101
     2dc:	f1 e0       	ldi	r31, 0x01	; 1
     2de:	de 01       	movw	r26, r28
     2e0:	11 96       	adiw	r26, 0x01	; 1
     2e2:	01 90       	ld	r0, Z+
     2e4:	0d 92       	st	X+, r0
     2e6:	8a 95       	dec	r24
     2e8:	e1 f7       	brne	.-8      	; 0x2e2 <init+0x6c>
	TFT_Print(&mytext[0], 4, 6, 2, TFT_16BitRed, TFT_16BitWhite, TFT_Landscape180);
     2ea:	0f 2e       	mov	r0, r31
     2ec:	f3 e0       	ldi	r31, 0x03	; 3
     2ee:	cf 2e       	mov	r12, r31
     2f0:	f0 2d       	mov	r31, r0
     2f2:	ee 24       	eor	r14, r14
     2f4:	ea 94       	dec	r14
     2f6:	fe 2c       	mov	r15, r14
     2f8:	00 e0       	ldi	r16, 0x00	; 0
     2fa:	18 ef       	ldi	r17, 0xF8	; 248
     2fc:	22 e0       	ldi	r18, 0x02	; 2
     2fe:	46 e0       	ldi	r20, 0x06	; 6
     300:	64 e0       	ldi	r22, 0x04	; 4
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	0e 94 75 05 	call	0xaea	; 0xaea <TFT_Print>
	
	// Buttons als Input setzen
	DDRD &= ~(1<<1);
     30a:	8a b1       	in	r24, 0x0a	; 10
     30c:	8d 7f       	andi	r24, 0xFD	; 253
     30e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 1<<1;
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	82 60       	ori	r24, 0x02	; 2
     314:	8b b9       	out	0x0b, r24	; 11
	DDRB &= ~(1<<1);
     316:	84 b1       	in	r24, 0x04	; 4
     318:	8d 7f       	andi	r24, 0xFD	; 253
     31a:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1<<1;
     31c:	85 b1       	in	r24, 0x05	; 5
     31e:	82 60       	ori	r24, 0x02	; 2
     320:	85 b9       	out	0x05, r24	; 5
	
	// Poti als Input setzen
	// ADC
	ADMUX= 0x100040;// AVCC on; Right adjust;MUXuse A0
     322:	80 e4       	ldi	r24, 0x40	; 64
     324:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA= 0xC7;// ADC enable; Stop Conversion; No Autotrigger; Interrupt disable; Prescaler= 128 means 125 kHz
     328:	87 ec       	ldi	r24, 0xC7	; 199
     32a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	// PortC 1 & 2 (LEDs), 3 (Buzzer), 4 (Trigger Ultraschallsensor) als Output
	// PortC 0 (Poti) und 5 (Echo Ultraschallsensor als Input)
	DDRC |=   0b011110;
     32e:	87 b1       	in	r24, 0x07	; 7
     330:	8e 61       	ori	r24, 0x1E	; 30
     332:	87 b9       	out	0x07, r24	; 7
	//			543210
	
	// Interrupts aktivieren
	sei();
     334:	78 94       	sei
	
	// Timer0 A Match Disable
	TIMSK0 |= (0<<OCIE0A);
     336:	ee e6       	ldi	r30, 0x6E	; 110
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	80 83       	st	Z, r24
	OCR0A = 0; //OCR => wann match
     33e:	17 bc       	out	0x27, r1	; 39
	// Configure CTC (Clear Timer on Compare) Mode
	TCCR0A |= (1<<WGM01);	// 1
     340:	84 b5       	in	r24, 0x24	; 36
     342:	82 60       	ori	r24, 0x02	; 2
     344:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<WGM00);	// 0
     346:	84 b5       	in	r24, 0x24	; 36
     348:	8e 7f       	andi	r24, 0xFE	; 254
     34a:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<WGM02);	// 0
     34c:	85 b5       	in	r24, 0x25	; 37
     34e:	87 7f       	andi	r24, 0xF7	; 247
     350:	85 bd       	out	0x25, r24	; 37
	// Prescaler konfigurieren (CPU Faktor reduzieren)
	TCCR0B |=(1<<CS02) | (1<<CS00);
     352:	85 b5       	in	r24, 0x25	; 37
     354:	85 60       	ori	r24, 0x05	; 5
     356:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     358:	85 b5       	in	r24, 0x25	; 37
     35a:	8d 7f       	andi	r24, 0xFD	; 253
     35c:	85 bd       	out	0x25, r24	; 37
	
	// Timer2 A Match Disable
	TIMSK2 |= (0 << OCIE2A);
     35e:	e0 e7       	ldi	r30, 0x70	; 112
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	80 83       	st	Z, r24
	OCR2A = 0;	
     366:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	// Configure CTC (Clear Timer on Compare) Mode
	TCCR2A |= (1 << WGM21);
     36a:	e0 eb       	ldi	r30, 0xB0	; 176
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	80 81       	ld	r24, Z
     370:	82 60       	ori	r24, 0x02	; 2
     372:	80 83       	st	Z, r24
	TCCR2A = 0;
     374:	10 82       	st	Z, r1
	TCCR2B = 0;
     376:	e1 eb       	ldi	r30, 0xB1	; 177
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	10 82       	st	Z, r1
	TCNT2 = 0;
     37c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	// Prescaler 8
	TCCR2B |= (1 << CS21);	
     380:	80 81       	ld	r24, Z
     382:	82 60       	ori	r24, 0x02	; 2
     384:	80 83       	st	Z, r24
	// Prescaler 32
	// TCCR2B |= (1 << CS21) | (1 << CS20);
		
	// Button 1 Interrupt - Interrupt auf PCINT17
	PCICR |= (1<<PCIE2); // enable Port D interrupt
     386:	e8 e6       	ldi	r30, 0x68	; 104
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	84 60       	ori	r24, 0x04	; 4
     38e:	80 83       	st	Z, r24
	PCMSK2 |= 1<<PCINT17; // enable PCINT17 interrupt
     390:	ad e6       	ldi	r26, 0x6D	; 109
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	8c 91       	ld	r24, X
     396:	82 60       	ori	r24, 0x02	; 2
     398:	8c 93       	st	X, r24
	
	// Ultraschallsensor Echo Interrupt auf PCINT13 
	// entsprechend Seite 57 Datenblatt ATMEGA328P
	PCICR |= (1<<PCIE1); // enable Port C interrupt
     39a:	80 81       	ld	r24, Z
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT13); // enable PCINT13 interrupt
     3a0:	ec e6       	ldi	r30, 0x6C	; 108
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	80 62       	ori	r24, 0x20	; 32
     3a8:	80 83       	st	Z, r24
	
	asm("nop");
     3aa:	00 00       	nop
}
     3ac:	2f 96       	adiw	r28, 0x0f	; 15
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	cf 90       	pop	r12
     3c6:	08 95       	ret

000003c8 <triggerDistanz>:

void triggerDistanz(void) {
	// Ultraschallsensor Trigger für 10 µs auf HIGH setzen
	US_TRIGGER_ON;
     3c8:	88 b1       	in	r24, 0x08	; 8
     3ca:	80 61       	ori	r24, 0x10	; 16
     3cc:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ce:	85 e3       	ldi	r24, 0x35	; 53
     3d0:	8a 95       	dec	r24
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <triggerDistanz+0x8>
     3d4:	00 00       	nop
	_delay_us(10);
	US_TRIGGER_OFF;
     3d6:	88 b1       	in	r24, 0x08	; 8
     3d8:	8f 7e       	andi	r24, 0xEF	; 239
     3da:	88 b9       	out	0x08, r24	; 8
     3dc:	08 95       	ret

000003de <sonicTimerOn>:
}

void sonicTimerOn(void){
	// timer  58 µs anschalten
	TIMSK2 |= (1 << OCIE2A); 
     3de:	e0 e7       	ldi	r30, 0x70	; 112
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	82 60       	ori	r24, 0x02	; 2
     3e6:	80 83       	st	Z, r24
	OCR2A = 115; //17241.379 Hz (16000000/((115+1)*8))  Pre  8
     3e8:	83 e7       	ldi	r24, 0x73	; 115
     3ea:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     3ee:	08 95       	ret

000003f0 <sonicTimerOff>:
	// OCR2A = 24;	// 20000 Hz (16000000/((24+1)*32)) Pre 32
}

void sonicTimerOff(void){
	// timer ausschalten
	TIMSK2 |= (0 << OCIE2A);
     3f0:	e0 e7       	ldi	r30, 0x70	; 112
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	80 83       	st	Z, r24
	OCR2A = 0;
     3f8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     3fc:	08 95       	ret

000003fe <__vector_7>:
			}
		}
	}
}

ISR(TIMER2_COMPA_vect){
     3fe:	1f 92       	push	r1
     400:	0f 92       	push	r0
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	0f 92       	push	r0
     406:	11 24       	eor	r1, r1
     408:	8f 93       	push	r24
     40a:	9f 93       	push	r25
	// einfach den sonicTimer um irgendwas hochzählen
	sonicTimer = sonicTimer +1;
     40c:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <sonicTimer>
     410:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <sonicTimer+0x1>
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <sonicTimer+0x1>
     41a:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <sonicTimer>
}
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <displayMessage>:
		// markieren, dass keine Messung mehr läuft
		sonicCounting = 0;
	}
}

void displayMessage(int messageID) {
     42c:	cf 92       	push	r12
     42e:	ef 92       	push	r14
     430:	ff 92       	push	r15
     432:	0f 93       	push	r16
     434:	1f 93       	push	r17
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
	char* message1;
	char* message2;
	
	switch(messageID) {
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	91 05       	cpc	r25, r1
     43e:	89 f0       	breq	.+34     	; 0x462 <displayMessage+0x36>
     440:	2c f4       	brge	.+10     	; 0x44c <displayMessage+0x20>
     442:	00 97       	sbiw	r24, 0x00	; 0
     444:	51 f0       	breq	.+20     	; 0x45a <displayMessage+0x2e>
     446:	01 97       	sbiw	r24, 0x01	; 1
     448:	29 f1       	breq	.+74     	; 0x494 <displayMessage+0x68>
     44a:	1f c0       	rjmp	.+62     	; 0x48a <displayMessage+0x5e>
     44c:	84 30       	cpi	r24, 0x04	; 4
     44e:	91 05       	cpc	r25, r1
     450:	91 f0       	breq	.+36     	; 0x476 <displayMessage+0x4a>
     452:	64 f0       	brlt	.+24     	; 0x46c <displayMessage+0x40>
     454:	05 97       	sbiw	r24, 0x05	; 5
     456:	a1 f0       	breq	.+40     	; 0x480 <displayMessage+0x54>
     458:	18 c0       	rjmp	.+48     	; 0x48a <displayMessage+0x5e>
		case 0:
			message1 = "              ";
			message2 = "              ";
     45a:	c4 e7       	ldi	r28, 0x74	; 116
     45c:	d1 e0       	ldi	r29, 0x01	; 1
	char* message1;
	char* message2;
	
	switch(messageID) {
		case 0:
			message1 = "              ";
     45e:	ce 01       	movw	r24, r28
     460:	1d c0       	rjmp	.+58     	; 0x49c <displayMessage+0x70>
			message1 = "  Willkommen  ";
			message2 = "              ";
			break;
		case 2:
			message1 = "Poti drehen   ";
			message2 = "Button drücken";
     462:	c2 e9       	ldi	r28, 0x92	; 146
     464:	d1 e0       	ldi	r29, 0x01	; 1
		case 1:
			message1 = "  Willkommen  ";
			message2 = "              ";
			break;
		case 2:
			message1 = "Poti drehen   ";
     466:	81 ea       	ldi	r24, 0xA1	; 161
     468:	91 e0       	ldi	r25, 0x01	; 1
			message2 = "Button drücken";
			break;
     46a:	18 c0       	rjmp	.+48     	; 0x49c <displayMessage+0x70>
		case 3:
			message1 = "Konzentration!";
			message2 = "Bald geschafft";
     46c:	c0 eb       	ldi	r28, 0xB0	; 176
     46e:	d1 e0       	ldi	r29, 0x01	; 1
		case 2:
			message1 = "Poti drehen   ";
			message2 = "Button drücken";
			break;
		case 3:
			message1 = "Konzentration!";
     470:	8f eb       	ldi	r24, 0xBF	; 191
     472:	91 e0       	ldi	r25, 0x01	; 1
			message2 = "Bald geschafft";
			break;
     474:	13 c0       	rjmp	.+38     	; 0x49c <displayMessage+0x70>
		case 4:
			message1 = "     Pause    ";
			message2 = "  Bis gleich  ";
     476:	ce ec       	ldi	r28, 0xCE	; 206
     478:	d1 e0       	ldi	r29, 0x01	; 1
		case 3:
			message1 = "Konzentration!";
			message2 = "Bald geschafft";
			break;
		case 4:
			message1 = "     Pause    ";
     47a:	8d ed       	ldi	r24, 0xDD	; 221
     47c:	91 e0       	ldi	r25, 0x01	; 1
			message2 = "  Bis gleich  ";
			break;
     47e:	0e c0       	rjmp	.+28     	; 0x49c <displayMessage+0x70>
		case 5:
			message1 = "  Geschafft!  ";
			message2 = "   nochmal?   ";
     480:	cc ee       	ldi	r28, 0xEC	; 236
     482:	d1 e0       	ldi	r29, 0x01	; 1
		case 4:
			message1 = "     Pause    ";
			message2 = "  Bis gleich  ";
			break;
		case 5:
			message1 = "  Geschafft!  ";
     484:	8b ef       	ldi	r24, 0xFB	; 251
     486:	91 e0       	ldi	r25, 0x01	; 1
			message2 = "   nochmal?   ";
			break;
     488:	09 c0       	rjmp	.+18     	; 0x49c <displayMessage+0x70>
		default:
			message1 = "  ! Fehler !  ";
			message2 = "              ";
     48a:	c4 e7       	ldi	r28, 0x74	; 116
     48c:	d1 e0       	ldi	r29, 0x01	; 1
		case 5:
			message1 = "  Geschafft!  ";
			message2 = "   nochmal?   ";
			break;
		default:
			message1 = "  ! Fehler !  ";
     48e:	8a e0       	ldi	r24, 0x0A	; 10
     490:	92 e0       	ldi	r25, 0x02	; 2
			message2 = "              ";
			break;
     492:	04 c0       	rjmp	.+8      	; 0x49c <displayMessage+0x70>
			message1 = "              ";
			message2 = "              ";
			break;
		case 1:
			message1 = "  Willkommen  ";
			message2 = "              ";
     494:	c4 e7       	ldi	r28, 0x74	; 116
     496:	d1 e0       	ldi	r29, 0x01	; 1
		case 0:
			message1 = "              ";
			message2 = "              ";
			break;
		case 1:
			message1 = "  Willkommen  ";
     498:	83 e8       	ldi	r24, 0x83	; 131
     49a:	91 e0       	ldi	r25, 0x01	; 1
			break;
		
	}
	// Nachdem die entsprechende Nachricht eingefügt wurde, kann diese
	// auf das Display übertragen werden:
	TFT_Print(message1, 4, 94, 2, TFT_16BitDark_Blue, TFT_16BitWhite, TFT_Landscape180);
     49c:	0f 2e       	mov	r0, r31
     49e:	f3 e0       	ldi	r31, 0x03	; 3
     4a0:	cf 2e       	mov	r12, r31
     4a2:	f0 2d       	mov	r31, r0
     4a4:	ee 24       	eor	r14, r14
     4a6:	ea 94       	dec	r14
     4a8:	fe 2c       	mov	r15, r14
     4aa:	03 e1       	ldi	r16, 0x13	; 19
     4ac:	10 e0       	ldi	r17, 0x00	; 0
     4ae:	22 e0       	ldi	r18, 0x02	; 2
     4b0:	4e e5       	ldi	r20, 0x5E	; 94
     4b2:	64 e0       	ldi	r22, 0x04	; 4
     4b4:	0e 94 75 05 	call	0xaea	; 0xaea <TFT_Print>
	TFT_Print(message2, 4, 114, 2, TFT_16BitDark_Blue, TFT_16BitWhite, TFT_Landscape180);
     4b8:	22 e0       	ldi	r18, 0x02	; 2
     4ba:	42 e7       	ldi	r20, 0x72	; 114
     4bc:	64 e0       	ldi	r22, 0x04	; 4
     4be:	ce 01       	movw	r24, r28
     4c0:	0e 94 75 05 	call	0xaea	; 0xaea <TFT_Print>
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	0f 91       	pop	r16
     4cc:	ff 90       	pop	r15
     4ce:	ef 90       	pop	r14
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <__vector_4>:
	BUZZER_OFF;
	configuration();
}

// Pin Change Interrupt für Ultraschallsensor 
ISR(PCINT1_vect) {
     4d4:	1f 92       	push	r1
     4d6:	0f 92       	push	r0
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	0f 92       	push	r0
     4dc:	11 24       	eor	r1, r1
     4de:	2f 93       	push	r18
     4e0:	3f 93       	push	r19
     4e2:	4f 93       	push	r20
     4e4:	5f 93       	push	r21
     4e6:	6f 93       	push	r22
     4e8:	7f 93       	push	r23
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	af 93       	push	r26
     4f0:	bf 93       	push	r27
     4f2:	ef 93       	push	r30
     4f4:	ff 93       	push	r31
	if (sonicCounting == 0) {
     4f6:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <sonicCounting>
     4fa:	81 11       	cpse	r24, r1
     4fc:	0a c0       	rjmp	.+20     	; 0x512 <__vector_4+0x3e>
		// Messung läuft nicht, Messung starten
		sonicTimer = 0;
     4fe:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <sonicTimer+0x1>
     502:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <sonicTimer>
		sonicTimerOn();
     506:	0e 94 ef 01 	call	0x3de	; 0x3de <sonicTimerOn>
		// markieren, das eine Messung läuft
		sonicCounting = 1;
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <sonicCounting>
     510:	12 c0       	rjmp	.+36     	; 0x536 <__vector_4+0x62>
	} else {
		// Messung läuft, Messung stoppen, Auswerten
		sonicTimerOff();
     512:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sonicTimerOff>
		
		// wenn gemessene Distanz zwischen 0 und grenzwert liegt, Fokus Nachricht einblenden
		if (sonicTimer < sonicThreshold) { displayMessage(3); }
     516:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	20 91 5e 05 	lds	r18, 0x055E	; 0x80055e <sonicTimer>
     520:	30 91 5f 05 	lds	r19, 0x055F	; 0x80055f <sonicTimer+0x1>
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	20 f4       	brcc	.+8      	; 0x532 <__vector_4+0x5e>
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 16 02 	call	0x42c	; 0x42c <displayMessage>
		
		// markieren, dass keine Messung mehr läuft
		sonicCounting = 0;
     532:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <sonicCounting>
	}
}
     536:	ff 91       	pop	r31
     538:	ef 91       	pop	r30
     53a:	bf 91       	pop	r27
     53c:	af 91       	pop	r26
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	7f 91       	pop	r23
     544:	6f 91       	pop	r22
     546:	5f 91       	pop	r21
     548:	4f 91       	pop	r20
     54a:	3f 91       	pop	r19
     54c:	2f 91       	pop	r18
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	0f 90       	pop	r0
     554:	1f 90       	pop	r1
     556:	18 95       	reti

00000558 <displayTimer>:
	// auf das Display übertragen werden:
	TFT_Print(message1, 4, 94, 2, TFT_16BitDark_Blue, TFT_16BitWhite, TFT_Landscape180);
	TFT_Print(message2, 4, 114, 2, TFT_16BitDark_Blue, TFT_16BitWhite, TFT_Landscape180);
}

void displayTimer(uint16_t sekunden) {
     558:	af 92       	push	r10
     55a:	bf 92       	push	r11
     55c:	cf 92       	push	r12
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	00 d0       	rcall	.+0      	; 0x56c <displayTimer+0x14>
     56c:	00 d0       	rcall	.+0      	; 0x56e <displayTimer+0x16>
     56e:	00 d0       	rcall	.+0      	; 0x570 <displayTimer+0x18>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	ac 01       	movw	r20, r24
	uint8_t minutes = sekunden / 60;
     576:	9c 01       	movw	r18, r24
     578:	a9 e8       	ldi	r26, 0x89	; 137
     57a:	b8 e8       	ldi	r27, 0x88	; 136
     57c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__umulhisi3>
     580:	fc 01       	movw	r30, r24
     582:	f6 95       	lsr	r31
     584:	e7 95       	ror	r30
     586:	f2 95       	swap	r31
     588:	e2 95       	swap	r30
     58a:	ef 70       	andi	r30, 0x0F	; 15
     58c:	ef 27       	eor	r30, r31
     58e:	ff 70       	andi	r31, 0x0F	; 15
     590:	ef 27       	eor	r30, r31
	uint8_t seconds = sekunden % 60;
     592:	2c e3       	ldi	r18, 0x3C	; 60
     594:	2e 9f       	mul	r18, r30
     596:	c0 01       	movw	r24, r0
     598:	2f 9f       	mul	r18, r31
     59a:	90 0d       	add	r25, r0
     59c:	11 24       	eor	r1, r1
     59e:	48 1b       	sub	r20, r24
     5a0:	59 0b       	sbc	r21, r25
	
	char anzeige[6];
	snprintf(anzeige, sizeof(anzeige), "%02d:%02d\n", minutes, seconds);
     5a2:	55 27       	eor	r21, r21
     5a4:	5f 93       	push	r21
     5a6:	4f 93       	push	r20
     5a8:	ff 27       	eor	r31, r31
     5aa:	ff 93       	push	r31
     5ac:	ef 93       	push	r30
     5ae:	89 e1       	ldi	r24, 0x19	; 25
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	9f 93       	push	r25
     5b4:	8f 93       	push	r24
     5b6:	1f 92       	push	r1
     5b8:	86 e0       	ldi	r24, 0x06	; 6
     5ba:	8f 93       	push	r24
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	5c 01       	movw	r10, r24
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 ab 06 	call	0xd56	; 0xd56 <snprintf>
	
	TFT_Print(anzeige, 25, 44, 4, TFT_16BitBlack, TFT_16BitWhite, TFT_Landscape180);
     5ca:	0f 2e       	mov	r0, r31
     5cc:	f3 e0       	ldi	r31, 0x03	; 3
     5ce:	cf 2e       	mov	r12, r31
     5d0:	f0 2d       	mov	r31, r0
     5d2:	ee 24       	eor	r14, r14
     5d4:	ea 94       	dec	r14
     5d6:	fe 2c       	mov	r15, r14
     5d8:	00 e0       	ldi	r16, 0x00	; 0
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	24 e0       	ldi	r18, 0x04	; 4
     5de:	4c e2       	ldi	r20, 0x2C	; 44
     5e0:	69 e1       	ldi	r22, 0x19	; 25
     5e2:	c5 01       	movw	r24, r10
     5e4:	0e 94 75 05 	call	0xaea	; 0xaea <TFT_Print>
}
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	26 96       	adiw	r28, 0x06	; 6
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	08 95       	ret

00000612 <readPoti>:

uint16_t readPoti(void) {
	ADCSRA|= (1 << ADSC);// Start conversion
     612:	ea e7       	ldi	r30, 0x7A	; 122
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	80 64       	ori	r24, 0x40	; 64
     61a:	80 83       	st	Z, r24
	while(ADCSRA& (1<<ADSC)); // wait while
     61c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     620:	86 fd       	sbrc	r24, 6
     622:	fc cf       	rjmp	.-8      	; 0x61c <readPoti+0xa>
	return ADC;
     624:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     628:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     62c:	08 95       	ret

0000062e <configuration>:

void configuration(void){
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	00 d0       	rcall	.+0      	; 0x634 <configuration+0x6>
     634:	00 d0       	rcall	.+0      	; 0x636 <configuration+0x8>
     636:	1f 92       	push	r1
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
	displayMessage(2);
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 16 02 	call	0x42c	; 0x42c <displayMessage>
	// messwert über Poti auslesen erhalten
	while (!BUTTON_2_PRESS){
     644:	64 c0       	rjmp	.+200    	; 0x70e <configuration+0xe0>
		uint16_t temp = readPoti();
     646:	0e 94 09 03 	call	0x612	; 0x612 <readPoti>
		
		if (temp < 128) {
     64a:	80 38       	cpi	r24, 0x80	; 128
     64c:	91 05       	cpc	r25, r1
     64e:	38 f4       	brcc	.+14     	; 0x65e <configuration+0x30>
			// messwert = 1200; // 20 Min
			messwert = 6; // 6 s for dev
     650:	86 e0       	ldi	r24, 0x06	; 6
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     658:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
     65c:	47 c0       	rjmp	.+142    	; 0x6ec <configuration+0xbe>
			} else if (temp < 256) {
     65e:	8f 3f       	cpi	r24, 0xFF	; 255
     660:	91 05       	cpc	r25, r1
     662:	09 f0       	breq	.+2      	; 0x666 <configuration+0x38>
     664:	38 f4       	brcc	.+14     	; 0x674 <configuration+0x46>
			messwert = 1500; // 25 Min
     666:	8c ed       	ldi	r24, 0xDC	; 220
     668:	95 e0       	ldi	r25, 0x05	; 5
     66a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     66e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
     672:	3c c0       	rjmp	.+120    	; 0x6ec <configuration+0xbe>
			} else if (temp < 384) {
     674:	80 38       	cpi	r24, 0x80	; 128
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	92 07       	cpc	r25, r18
     67a:	38 f4       	brcc	.+14     	; 0x68a <configuration+0x5c>
			messwert = 1800; // 30 Min
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	97 e0       	ldi	r25, 0x07	; 7
     680:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     684:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
     688:	31 c0       	rjmp	.+98     	; 0x6ec <configuration+0xbe>
			} else if (temp < 512) {
     68a:	81 15       	cp	r24, r1
     68c:	22 e0       	ldi	r18, 0x02	; 2
     68e:	92 07       	cpc	r25, r18
     690:	38 f4       	brcc	.+14     	; 0x6a0 <configuration+0x72>
			messwert = 2100; // 35 Min
     692:	84 e3       	ldi	r24, 0x34	; 52
     694:	98 e0       	ldi	r25, 0x08	; 8
     696:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     69a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
     69e:	26 c0       	rjmp	.+76     	; 0x6ec <configuration+0xbe>
			} else if (temp < 640) {
     6a0:	80 38       	cpi	r24, 0x80	; 128
     6a2:	22 e0       	ldi	r18, 0x02	; 2
     6a4:	92 07       	cpc	r25, r18
     6a6:	38 f4       	brcc	.+14     	; 0x6b6 <configuration+0x88>
			messwert = 2400; // 40 Min
     6a8:	80 e6       	ldi	r24, 0x60	; 96
     6aa:	99 e0       	ldi	r25, 0x09	; 9
     6ac:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     6b0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
     6b4:	1b c0       	rjmp	.+54     	; 0x6ec <configuration+0xbe>
			} else if (temp < 768) {
     6b6:	81 15       	cp	r24, r1
     6b8:	23 e0       	ldi	r18, 0x03	; 3
     6ba:	92 07       	cpc	r25, r18
     6bc:	38 f4       	brcc	.+14     	; 0x6cc <configuration+0x9e>
			messwert = 2700; // 45 Min
     6be:	8c e8       	ldi	r24, 0x8C	; 140
     6c0:	9a e0       	ldi	r25, 0x0A	; 10
     6c2:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     6c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
     6ca:	10 c0       	rjmp	.+32     	; 0x6ec <configuration+0xbe>
			} else if (temp < 896) {
     6cc:	80 38       	cpi	r24, 0x80	; 128
     6ce:	93 40       	sbci	r25, 0x03	; 3
     6d0:	38 f4       	brcc	.+14     	; 0x6e0 <configuration+0xb2>
			messwert = 3000; // 50 Min
     6d2:	88 eb       	ldi	r24, 0xB8	; 184
     6d4:	9b e0       	ldi	r25, 0x0B	; 11
     6d6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     6da:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
     6de:	06 c0       	rjmp	.+12     	; 0x6ec <configuration+0xbe>
			} else {
			messwert = 3300; // 55 Min
     6e0:	84 ee       	ldi	r24, 0xE4	; 228
     6e2:	9c e0       	ldi	r25, 0x0C	; 12
     6e4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <messwert+0x1>
     6e8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <messwert>
		}
		
		displayTimer(messwert);
     6ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <messwert>
     6f0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <messwert+0x1>
     6f4:	0e 94 ac 02 	call	0x558	; 0x558 <displayTimer>
		
		char snum[5];
		itoa(messwert, snum, 10);
     6f8:	4a e0       	ldi	r20, 0x0A	; 10
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	be 01       	movw	r22, r28
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <messwert>
     706:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <messwert+0x1>
     70a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <itoa>
}

void configuration(void){
	displayMessage(2);
	// messwert über Poti auslesen erhalten
	while (!BUTTON_2_PRESS){
     70e:	19 99       	sbic	0x03, 1	; 3
     710:	9a cf       	rjmp	.-204    	; 0x646 <configuration+0x18>
		
		// TFT_Print(snum, 30, 30, 2, TFT_16BitOrange, TFT_16BitWhite, TFT_Landscape180);
	}
	
	// messwert in die Variablen schreiben
	timer = messwert;
     712:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <messwert>
     716:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <messwert+0x1>
     71a:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <timer+0x1>
     71e:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <timer>
	displayMessage(0);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 16 02 	call	0x42c	; 0x42c <displayMessage>
	RED_LED_ON;
     72a:	88 b1       	in	r24, 0x08	; 8
     72c:	84 60       	ori	r24, 0x04	; 4
     72e:	88 b9       	out	0x08, r24	; 8
	
	UHRWERK_ON;
     730:	ee e6       	ldi	r30, 0x6E	; 110
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	82 60       	ori	r24, 0x02	; 2
     738:	80 83       	st	Z, r24
     73a:	8b e9       	ldi	r24, 0x9B	; 155
     73c:	87 bd       	out	0x27, r24	; 39
	// entering State 3 - Work Timer Phase
	state = 3;
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <__vector_14>:
	OCR2A = 0;
}

// Timer Interrupt alle 10 ms
ISR(TIMER0_COMPA_vect)
{
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	2f 93       	push	r18
     760:	3f 93       	push	r19
     762:	4f 93       	push	r20
     764:	5f 93       	push	r21
     766:	6f 93       	push	r22
     768:	7f 93       	push	r23
     76a:	8f 93       	push	r24
     76c:	9f 93       	push	r25
     76e:	af 93       	push	r26
     770:	bf 93       	push	r27
     772:	ef 93       	push	r30
     774:	ff 93       	push	r31
	static volatile uint8_t counter = 0;
	counter++;
     776:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <__data_end>
     77a:	8f 5f       	subi	r24, 0xFF	; 255
     77c:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <__data_end>
	// da der Interrupt alle 10 ms kommt und wir aber nur einmal pro Sekunde
	// wirklich was machen wollen, zählen wir halt bis 100. (100*10 ms = 1 s)
	if (counter == 100)	{
     780:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <__data_end>
     784:	84 36       	cpi	r24, 0x64	; 100
     786:	09 f0       	breq	.+2      	; 0x78a <__vector_14+0x36>
     788:	85 c0       	rjmp	.+266    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
		counter = 0;
     78a:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <__data_end>

		// Ultraschallsensor Messung auslösen 
		if (state == 3) {
     78e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <state>
     792:	83 30       	cpi	r24, 0x03	; 3
     794:	11 f4       	brne	.+4      	; 0x79a <__vector_14+0x46>
			// nur in der Arbeitsphase (State 3) brauchen wir die Messung
			triggerDistanz();
     796:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <triggerDistanz>
		}
				
		// timer um eins senken
		timer--;
     79a:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <timer>
     79e:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <timer+0x1>
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <timer+0x1>
     7a8:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <timer>
		// display aktualisieren
		displayTimer(timer);
     7ac:	0e 94 ac 02 	call	0x558	; 0x558 <displayTimer>
		
		if (timer < 1) {
     7b0:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <timer>
     7b4:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <timer+0x1>
     7b8:	89 2b       	or	r24, r25
     7ba:	09 f0       	breq	.+2      	; 0x7be <__vector_14+0x6a>
     7bc:	6b c0       	rjmp	.+214    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
			// timer wird IMMER ausgeschaltet, falls benötigt, danach wieder angeschaltet.
			
			switch (state) {
     7be:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <state>
     7c2:	85 30       	cpi	r24, 0x05	; 5
     7c4:	b1 f1       	breq	.+108    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     7c6:	28 f4       	brcc	.+10     	; 0x7d2 <__vector_14+0x7e>
     7c8:	83 30       	cpi	r24, 0x03	; 3
     7ca:	51 f0       	breq	.+20     	; 0x7e0 <__vector_14+0x8c>
     7cc:	84 30       	cpi	r24, 0x04	; 4
     7ce:	d9 f0       	breq	.+54     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7d0:	61 c0       	rjmp	.+194    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
     7d2:	86 30       	cpi	r24, 0x06	; 6
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <__vector_14+0x84>
     7d6:	40 c0       	rjmp	.+128    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7d8:	87 30       	cpi	r24, 0x07	; 7
     7da:	09 f4       	brne	.+2      	; 0x7de <__vector_14+0x8a>
     7dc:	50 c0       	rjmp	.+160    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     7de:	5a c0       	rjmp	.+180    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
				case 3:
					ALL_LED_OFF;;
     7e0:	88 b1       	in	r24, 0x08	; 8
     7e2:	8b 7f       	andi	r24, 0xFB	; 251
     7e4:	88 b9       	out	0x08, r24	; 8
     7e6:	88 b1       	in	r24, 0x08	; 8
     7e8:	8d 7f       	andi	r24, 0xFD	; 253
     7ea:	88 b9       	out	0x08, r24	; 8
					// Buzzer output für 1 sek
					BUZZER_ON;
     7ec:	88 b1       	in	r24, 0x08	; 8
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	88 b9       	out	0x08, r24	; 8
					timer = 1;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <timer+0x1>
     7fa:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <timer>
					state = 4; // übergabe zu state 4
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
					break;
     804:	47 c0       	rjmp	.+142    	; 0x894 <__DATA_REGION_LENGTH__+0x94>
				case 4:
					GREEN_LED_ON;
     806:	88 b1       	in	r24, 0x08	; 8
     808:	82 60       	ori	r24, 0x02	; 2
     80a:	88 b9       	out	0x08, r24	; 8
					// Pause
					BUZZER_OFF;
     80c:	88 b1       	in	r24, 0x08	; 8
     80e:	87 7f       	andi	r24, 0xF7	; 247
     810:	88 b9       	out	0x08, r24	; 8
					// timer = 300; dev
					timer = pausenzeit;
     812:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <pausenzeit>
     816:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <pausenzeit+0x1>
     81a:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <timer+0x1>
     81e:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <timer>
					displayMessage(4);
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 16 02 	call	0x42c	; 0x42c <displayMessage>
					state = 5; // übergabe zu state 5
     82a:	85 e0       	ldi	r24, 0x05	; 5
     82c:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
					break;
     830:	31 c0       	rjmp	.+98     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
				case 5:
					ALL_LED_OFF;;
     832:	88 b1       	in	r24, 0x08	; 8
     834:	8b 7f       	andi	r24, 0xFB	; 251
     836:	88 b9       	out	0x08, r24	; 8
     838:	88 b1       	in	r24, 0x08	; 8
     83a:	8d 7f       	andi	r24, 0xFD	; 253
     83c:	88 b9       	out	0x08, r24	; 8
					// Buzzer output für 1 sek
					BUZZER_ON;
     83e:	88 b1       	in	r24, 0x08	; 8
     840:	88 60       	ori	r24, 0x08	; 8
     842:	88 b9       	out	0x08, r24	; 8
					timer = 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <timer+0x1>
     84c:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <timer>
					state = 6; // übergabe zu state 6
     850:	86 e0       	ldi	r24, 0x06	; 6
     852:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
					break;
     856:	1e c0       	rjmp	.+60     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
				case 6:
					// Ende
					BUZZER_OFF;
     858:	88 b1       	in	r24, 0x08	; 8
     85a:	87 7f       	andi	r24, 0xF7	; 247
     85c:	88 b9       	out	0x08, r24	; 8
					timer = endzeit;
     85e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <endzeit>
     862:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <endzeit+0x1>
     866:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <timer+0x1>
     86a:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <timer>
					displayMessage(5);
     86e:	85 e0       	ldi	r24, 0x05	; 5
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 16 02 	call	0x42c	; 0x42c <displayMessage>
					state = 7; // übergabe zu state 7
     876:	87 e0       	ldi	r24, 0x07	; 7
     878:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
					break;
     87c:	0b c0       	rjmp	.+22     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
				case 7:
					// Neustart ist keine Option, die State Machine springt zurück in State
					UHRWERK_OFF;
     87e:	ee e6       	ldi	r30, 0x6E	; 110
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	8d 7f       	andi	r24, 0xFD	; 253
     886:	80 83       	st	Z, r24
     888:	17 bc       	out	0x27, r1	; 39
					state = 2;
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
					configuration();
     890:	0e 94 17 03 	call	0x62e	; 0x62e <configuration>
					break;
			}
		}
	}
}
     894:	ff 91       	pop	r31
     896:	ef 91       	pop	r30
     898:	bf 91       	pop	r27
     89a:	af 91       	pop	r26
     89c:	9f 91       	pop	r25
     89e:	8f 91       	pop	r24
     8a0:	7f 91       	pop	r23
     8a2:	6f 91       	pop	r22
     8a4:	5f 91       	pop	r21
     8a6:	4f 91       	pop	r20
     8a8:	3f 91       	pop	r19
     8aa:	2f 91       	pop	r18
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <__vector_5>:
	sonicTimer = sonicTimer +1;
}


// Button 1 Interrupt
ISR(PCINT2_vect) {
     8b6:	1f 92       	push	r1
     8b8:	0f 92       	push	r0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	0f 92       	push	r0
     8be:	11 24       	eor	r1, r1
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
	UHRWERK_OFF;
     8d8:	ee e6       	ldi	r30, 0x6E	; 110
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	8d 7f       	andi	r24, 0xFD	; 253
     8e0:	80 83       	st	Z, r24
     8e2:	17 bc       	out	0x27, r1	; 39
	timer = 0; // sane
     8e4:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <timer+0x1>
     8e8:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <timer>
	// Zurück zur Konfiguration
	state = 2;
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
	// LEDS ausschalten
	GREEN_LED_OFF;
     8f2:	88 b1       	in	r24, 0x08	; 8
     8f4:	8d 7f       	andi	r24, 0xFD	; 253
     8f6:	88 b9       	out	0x08, r24	; 8
	RED_LED_OFF;
     8f8:	88 b1       	in	r24, 0x08	; 8
     8fa:	8b 7f       	andi	r24, 0xFB	; 251
     8fc:	88 b9       	out	0x08, r24	; 8
	BUZZER_OFF;
     8fe:	88 b1       	in	r24, 0x08	; 8
     900:	87 7f       	andi	r24, 0xF7	; 247
     902:	88 b9       	out	0x08, r24	; 8
	configuration();
     904:	0e 94 17 03 	call	0x62e	; 0x62e <configuration>
}
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <main>:
	state = 3;
}

int main(void){
	// State 0 - Init Phase
	state = 0;
     92a:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <state>
	init();
     92e:	0e 94 3b 01 	call	0x276	; 0x276 <init>
	
	// todo: Serial Out?
	
	// State 1 - Willkommen Nachricht
	state = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
	displayMessage(1); // Nachricht aufs Display schicken
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 16 02 	call	0x42c	; 0x42c <displayMessage>
	
	while (!BUTTON_2_PRESS){;};
     940:	19 99       	sbic	0x03, 1	; 3
     942:	fe cf       	rjmp	.-4      	; 0x940 <main+0x16>
	
	// State 2 - Konfiguraton
	state = 2;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <state>
	
	displayMessage(2);
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 16 02 	call	0x42c	; 0x42c <displayMessage>
	// warten bis knopf losgelassen
	while (BUTTON_2_PRESS){;};
     952:	19 9b       	sbis	0x03, 1	; 3
     954:	fe cf       	rjmp	.-4      	; 0x952 <main+0x28>
	configuration();
     956:	0e 94 17 03 	call	0x62e	; 0x62e <configuration>
     95a:	ff cf       	rjmp	.-2      	; 0x95a <main+0x30>

0000095c <SendCommandSeq>:
   0x0C , 0x12 , 0x12 , 0x1C , 0x12 , 0x12 , 0x1C , 0x10,      //ß
   0x06 , 0x09 , 0x09 , 0x06 , 0x00 , 0x00 , 0x00 , 0x00	   //°  Anmerkung: selbst hinzugefügt!!	
};
//Funktion zum Senden eines Kommandos an das Display
void SendCommandSeq(U16 * data, U16 count)	//const U16 * data: veränderbarer Pointer zu einem nicht veränderbaren String
{
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	6c 01       	movw	r12, r24
     96e:	7b 01       	movw	r14, r22
  U16 i;
	U8  sd;

	for (i=0; i<count; ++i)
     970:	00 e0       	ldi	r16, 0x00	; 0
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	13 c0       	rjmp	.+38     	; 0x99c <SendCommandSeq+0x40>
	{
		PORTD |= (1<<D_C);   		//Data/Command auf High => Kommando-Modus
     976:	8b b1       	in	r24, 0x0b	; 11
     978:	84 60       	ori	r24, 0x04	; 4
     97a:	8b b9       	out	0x0b, r24	; 11
		sd = (data[i] >> 8) & 0xFF;     //MSB
     97c:	e8 01       	movw	r28, r16
     97e:	cc 0f       	add	r28, r28
     980:	dd 1f       	adc	r29, r29
     982:	cc 0d       	add	r28, r12
     984:	dd 1d       	adc	r29, r13
		SPISend8Bit(sd);
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	0e 94 a6 00 	call	0x14c	; 0x14c <SPISend8Bit>
		sd = data[i] & 0xFF;            //LSB
		SPISend8Bit(sd);
     98c:	88 81       	ld	r24, Y
     98e:	0e 94 a6 00 	call	0x14c	; 0x14c <SPISend8Bit>
		PORTD &= ~(1<<D_C);		//Data/Command auf Low => Daten-Modus
     992:	8b b1       	in	r24, 0x0b	; 11
     994:	8b 7f       	andi	r24, 0xFB	; 251
     996:	8b b9       	out	0x0b, r24	; 11
void SendCommandSeq(U16 * data, U16 count)	//const U16 * data: veränderbarer Pointer zu einem nicht veränderbaren String
{
  U16 i;
	U8  sd;

	for (i=0; i<count; ++i)
     998:	0f 5f       	subi	r16, 0xFF	; 255
     99a:	1f 4f       	sbci	r17, 0xFF	; 255
     99c:	0e 15       	cp	r16, r14
     99e:	1f 05       	cpc	r17, r15
     9a0:	50 f3       	brcs	.-44     	; 0x976 <SendCommandSeq+0x1a>
		sd = data[i] & 0xFF;            //LSB
		SPISend8Bit(sd);
		PORTD &= ~(1<<D_C);		//Data/Command auf Low => Daten-Modus
		
	}
}
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	df 90       	pop	r13
     9b0:	cf 90       	pop	r12
     9b2:	08 95       	ret

000009b4 <TFT_Window>:
  
//Funktion zum Festlegen der Display-Orientierung und eines Ausgabefensters
void TFT_Window(U8 x1, U8 y1, U8 x2, U8 y2, U8 TFT_Orientation) 
{ 
     9b4:	0f 93       	push	r16
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	2c 97       	sbiw	r28, 0x0c	; 12
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
	U16 data[] = 
     9ca:	9c e0       	ldi	r25, 0x0C	; 12
     9cc:	e9 e5       	ldi	r30, 0x59	; 89
     9ce:	f1 e0       	ldi	r31, 0x01	; 1
     9d0:	de 01       	movw	r26, r28
     9d2:	11 96       	adiw	r26, 0x01	; 1
     9d4:	01 90       	ld	r0, Z+
     9d6:	0d 92       	st	X+, r0
     9d8:	9a 95       	dec	r25
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <TFT_Window+0x20>
		0x1500, // x2,
		0x1300, // y1,
		0x1600  // y2 
	};

	switch (TFT_Orientation)
     9dc:	02 30       	cpi	r16, 0x02	; 2
     9de:	b1 f1       	breq	.+108    	; 0xa4c <TFT_Window+0x98>
     9e0:	03 30       	cpi	r16, 0x03	; 3
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <TFT_Window+0x32>
     9e4:	4e c0       	rjmp	.+156    	; 0xa82 <TFT_Window+0xce>
     9e6:	01 30       	cpi	r16, 0x01	; 1
     9e8:	89 f0       	breq	.+34     	; 0xa0c <TFT_Window+0x58>
	{
		default:
			//Wenn ungültig, verwende Hochformat!
		case TFT_Portrait:		//Hochformat
		data[2]  |= x1;
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	92 61       	ori	r25, 0x12	; 18
     9ee:	9e 83       	std	Y+6, r25	; 0x06
     9f0:	8d 83       	std	Y+5, r24	; 0x05
	    data[3]  |= x2;
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	55 61       	ori	r21, 0x15	; 21
     9f6:	58 87       	std	Y+8, r21	; 0x08
     9f8:	4f 83       	std	Y+7, r20	; 0x07
	    data[4]  |= y1;
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	73 61       	ori	r23, 0x13	; 19
     9fe:	7a 87       	std	Y+10, r23	; 0x0a
     a00:	69 87       	std	Y+9, r22	; 0x09
	    data[5]  |= y2;
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	36 61       	ori	r19, 0x16	; 22
     a06:	3c 87       	std	Y+12, r19	; 0x0c
     a08:	2b 87       	std	Y+11, r18	; 0x0b
			break;
     a0a:	55 c0       	rjmp	.+170    	; 0xab6 <TFT_Window+0x102>
		case TFT_Portrait180:
			data[1] |= 0x03;		//Hochformat um 180° gedreht
     a0c:	e3 e0       	ldi	r30, 0x03	; 3
     a0e:	f8 e1       	ldi	r31, 0x18	; 24
     a10:	fc 83       	std	Y+4, r31	; 0x04
     a12:	eb 83       	std	Y+3, r30	; 0x03
			data[2] |= TFT_MAX_X - x1;
     a14:	e3 e8       	ldi	r30, 0x83	; 131
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	df 01       	movw	r26, r30
     a1a:	a8 1b       	sub	r26, r24
     a1c:	b1 09       	sbc	r27, r1
     a1e:	cd 01       	movw	r24, r26
     a20:	92 61       	ori	r25, 0x12	; 18
     a22:	9e 83       	std	Y+6, r25	; 0x06
     a24:	8d 83       	std	Y+5, r24	; 0x05
			data[3] |= TFT_MAX_X - x2;
     a26:	e4 1b       	sub	r30, r20
     a28:	f1 09       	sbc	r31, r1
     a2a:	f5 61       	ori	r31, 0x15	; 21
     a2c:	f8 87       	std	Y+8, r31	; 0x08
     a2e:	ef 83       	std	Y+7, r30	; 0x07
			data[4] |= TFT_MAX_Y - y1;
     a30:	8f ea       	ldi	r24, 0xAF	; 175
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	ac 01       	movw	r20, r24
     a36:	46 1b       	sub	r20, r22
     a38:	51 09       	sbc	r21, r1
     a3a:	53 61       	ori	r21, 0x13	; 19
     a3c:	5a 87       	std	Y+10, r21	; 0x0a
     a3e:	49 87       	std	Y+9, r20	; 0x09
			data[5] |= TFT_MAX_Y - y2;
     a40:	82 1b       	sub	r24, r18
     a42:	91 09       	sbc	r25, r1
     a44:	96 61       	ori	r25, 0x16	; 22
     a46:	9c 87       	std	Y+12, r25	; 0x0c
     a48:	8b 87       	std	Y+11, r24	; 0x0b
			break;
     a4a:	35 c0       	rjmp	.+106    	; 0xab6 <TFT_Window+0x102>
		case TFT_Landscape:
			data[1] |= 0x05;		//Querformat
     a4c:	e5 e0       	ldi	r30, 0x05	; 5
     a4e:	f8 e1       	ldi	r31, 0x18	; 24
     a50:	fc 83       	std	Y+4, r31	; 0x04
     a52:	eb 83       	std	Y+3, r30	; 0x03
			data[2] |= TFT_MAX_X - y1;
     a54:	e3 e8       	ldi	r30, 0x83	; 131
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	df 01       	movw	r26, r30
     a5a:	a6 1b       	sub	r26, r22
     a5c:	b1 09       	sbc	r27, r1
     a5e:	bd 01       	movw	r22, r26
     a60:	72 61       	ori	r23, 0x12	; 18
     a62:	7e 83       	std	Y+6, r23	; 0x06
     a64:	6d 83       	std	Y+5, r22	; 0x05
			data[3] |= TFT_MAX_X - y2;
     a66:	e2 1b       	sub	r30, r18
     a68:	f1 09       	sbc	r31, r1
     a6a:	f5 61       	ori	r31, 0x15	; 21
     a6c:	f8 87       	std	Y+8, r31	; 0x08
     a6e:	ef 83       	std	Y+7, r30	; 0x07
			data[4] |= x1;
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	93 61       	ori	r25, 0x13	; 19
     a74:	9a 87       	std	Y+10, r25	; 0x0a
     a76:	89 87       	std	Y+9, r24	; 0x09
			data[5] |= x2;
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	56 61       	ori	r21, 0x16	; 22
     a7c:	5c 87       	std	Y+12, r21	; 0x0c
     a7e:	4b 87       	std	Y+11, r20	; 0x0b
			break;
     a80:	1a c0       	rjmp	.+52     	; 0xab6 <TFT_Window+0x102>
		case TFT_Landscape180:
			data[1] |= 0x06;		//Querformat um 180° gedreht
     a82:	e6 e0       	ldi	r30, 0x06	; 6
     a84:	f8 e1       	ldi	r31, 0x18	; 24
     a86:	fc 83       	std	Y+4, r31	; 0x04
     a88:	eb 83       	std	Y+3, r30	; 0x03
			data[2] |= y1;
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	72 61       	ori	r23, 0x12	; 18
     a8e:	7e 83       	std	Y+6, r23	; 0x06
     a90:	6d 83       	std	Y+5, r22	; 0x05
			data[3] |= y2;
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	35 61       	ori	r19, 0x15	; 21
     a96:	38 87       	std	Y+8, r19	; 0x08
     a98:	2f 83       	std	Y+7, r18	; 0x07
			data[4] |= TFT_MAX_Y - x1;
     a9a:	2f ea       	ldi	r18, 0xAF	; 175
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	b9 01       	movw	r22, r18
     aa0:	68 1b       	sub	r22, r24
     aa2:	71 09       	sbc	r23, r1
     aa4:	cb 01       	movw	r24, r22
     aa6:	93 61       	ori	r25, 0x13	; 19
     aa8:	9a 87       	std	Y+10, r25	; 0x0a
     aaa:	89 87       	std	Y+9, r24	; 0x09
			data[5] |= TFT_MAX_Y - x2;
     aac:	24 1b       	sub	r18, r20
     aae:	31 09       	sbc	r19, r1
     ab0:	36 61       	ori	r19, 0x16	; 22
     ab2:	3c 87       	std	Y+12, r19	; 0x0c
     ab4:	2b 87       	std	Y+11, r18	; 0x0b
			break;
    }

	SendCommandSeq(data, 6);
     ab6:	66 e0       	ldi	r22, 0x06	; 6
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 ae 04 	call	0x95c	; 0x95c <SendCommandSeq>
} 
     ac2:	2c 96       	adiw	r28, 0x0c	; 12
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	0f 91       	pop	r16
     ad4:	08 95       	ret

00000ad6 <TFT_SPI_16BitPixelSend>:

// Funktion zum Übertragen der Farbdaten an das Display
void TFT_SPI_16BitPixelSend(U16 data)
{
     ad6:	cf 93       	push	r28
     ad8:	c8 2f       	mov	r28, r24
	U8   lo, hi;

	hi = (data >> 8) & 0xFF;   //MSB
	lo = data & 0xFF;          //LSB

	SPISend8Bit(hi);
     ada:	89 2f       	mov	r24, r25
     adc:	0e 94 a6 00 	call	0x14c	; 0x14c <SPISend8Bit>
	SPISend8Bit(lo);
     ae0:	8c 2f       	mov	r24, r28
     ae2:	0e 94 a6 00 	call	0x14c	; 0x14c <SPISend8Bit>
}
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <TFT_Print>:

//-------------------------------------------------------------------------------
// Funktion zum Erzeugen von Schrift!
//-------------------------------------------------------------------------------
void TFT_Print(char* Text, U8 X, U8 Y, U8 Scale, U16 ForeColor, U16 BackColor, U8 Display_Orientation)
{
     aea:	2f 92       	push	r2
     aec:	3f 92       	push	r3
     aee:	4f 92       	push	r4
     af0:	5f 92       	push	r5
     af2:	6f 92       	push	r6
     af4:	7f 92       	push	r7
     af6:	8f 92       	push	r8
     af8:	9f 92       	push	r9
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	2a 97       	sbiw	r28, 0x0a	; 10
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	9c 83       	std	Y+4, r25	; 0x04
     b20:	8b 83       	std	Y+3, r24	; 0x03
     b22:	86 2f       	mov	r24, r22
     b24:	4d 83       	std	Y+5, r20	; 0x05
     b26:	82 2e       	mov	r8, r18
     b28:	90 2e       	mov	r9, r16
     b2a:	71 2e       	mov	r7, r17
     b2c:	c8 86       	std	Y+8, r12	; 0x08
		CharHeight = 8;	//Anzahl der Pixel der Schrifthöhe (ohne Leerzeichen für den Zeilenabstand)
		CellWidth = 6;	//Anzahl der Pixel der Schriftbreite inkl. Leerzeichen; hier kann man den Buchstabenabstand verändern
		CellHeight = 9;	//Anzahl der Pixel der Schrifthöhe inkl. Leerzeichen; hier kann man den Zeilenabstand verändern

		Index = 0;
		Ch = Text[Index];				//in Ch wird der Wert (ASCII 32) des darzustellen Zeichens abgelegt
     b2e:	eb 81       	ldd	r30, Y+3	; 0x03
     b30:	fc 81       	ldd	r31, Y+4	; 0x04
     b32:	40 81       	ld	r20, Z
		CharWidth = 5;	//Anzahl der Pixel der Schriftbreite (ohne Leerzeichen für den Buchstabenabstand)
		CharHeight = 8;	//Anzahl der Pixel der Schrifthöhe (ohne Leerzeichen für den Zeilenabstand)
		CellWidth = 6;	//Anzahl der Pixel der Schriftbreite inkl. Leerzeichen; hier kann man den Buchstabenabstand verändern
		CellHeight = 9;	//Anzahl der Pixel der Schrifthöhe inkl. Leerzeichen; hier kann man den Zeilenabstand verändern

		Index = 0;
     b34:	19 82       	std	Y+1, r1	; 0x01
		Ch = Text[Index];				//in Ch wird der Wert (ASCII 32) des darzustellen Zeichens abgelegt
    while( Ch != 0x00 )
     b36:	af c0       	rjmp	.+350    	; 0xc96 <TFT_Print+0x1ac>
		{	
			if (Ch > 122)								//Definition einiger Sonderzeichen am Ende der Schrifttabelle
     b38:	4b 37       	cpi	r20, 0x7B	; 123
     b3a:	e0 f0       	brcs	.+56     	; 0xb74 <TFT_Print+0x8a>
		{
				switch (Ch)								//Hier werden ungenutzte ASCII-Zeichen eliminiert
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	fa 01       	movw	r30, r20
     b40:	e0 5b       	subi	r30, 0xB0	; 176
     b42:	f1 09       	sbc	r31, r1
     b44:	ed 34       	cpi	r30, 0x4D	; 77
     b46:	f1 05       	cpc	r31, r1
     b48:	90 f4       	brcc	.+36     	; 0xb6e <TFT_Print+0x84>
     b4a:	ec 5c       	subi	r30, 0xCC	; 204
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	0c 94 66 06 	jmp	0xccc	; 0xccc <__tablejump2__>
				{
					case 228: Ch = 127; break;			// ä ist an Pos. 127 etc.
     b52:	4f e7       	ldi	r20, 0x7F	; 127
     b54:	0f c0       	rjmp	.+30     	; 0xb74 <TFT_Print+0x8a>
					case 246: Ch = 128; break;			// ö
					case 252: Ch = 129; break;			// ü
     b56:	41 e8       	ldi	r20, 0x81	; 129
     b58:	0d c0       	rjmp	.+26     	; 0xb74 <TFT_Print+0x8a>
					case 196: Ch = 130; break;			// Ä
     b5a:	42 e8       	ldi	r20, 0x82	; 130
     b5c:	0b c0       	rjmp	.+22     	; 0xb74 <TFT_Print+0x8a>
					case 214: Ch = 131; break;			// Ö
     b5e:	43 e8       	ldi	r20, 0x83	; 131
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <TFT_Print+0x8a>
					case 220: Ch = 132; break;			// Ü
     b62:	44 e8       	ldi	r20, 0x84	; 132
     b64:	07 c0       	rjmp	.+14     	; 0xb74 <TFT_Print+0x8a>
					case 223: Ch = 133; break;			// ß	
     b66:	45 e8       	ldi	r20, 0x85	; 133
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <TFT_Print+0x8a>
					case 176: Ch = 134; break;			// ° ist an Pos. 134					
     b6a:	46 e8       	ldi	r20, 0x86	; 134
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <TFT_Print+0x8a>
					default: Ch = '?'; break;				// nicht erlaubt: wechsel zu ?
     b6e:	4f e3       	ldi	r20, 0x3F	; 63
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <TFT_Print+0x8a>
			if (Ch > 122)								//Definition einiger Sonderzeichen am Ende der Schrifttabelle
		{
				switch (Ch)								//Hier werden ungenutzte ASCII-Zeichen eliminiert
				{
					case 228: Ch = 127; break;			// ä ist an Pos. 127 etc.
					case 246: Ch = 128; break;			// ö
     b72:	40 e8       	ldi	r20, 0x80	; 128
					case 176: Ch = 134; break;			// ° ist an Pos. 134					
					default: Ch = '?'; break;				// nicht erlaubt: wechsel zu ?
				}
		}
		
		Ch -= 32; 	//von Ch wird 32 abgezogen, da wir keine ASCII-Zeichen kleiner als ASCII 32 verwenden; die Schrifttabelle startet mit ASCII 32, das ist das Leerzeichen
     b74:	40 52       	subi	r20, 0x20	; 32
     b76:	4e 83       	std	Y+6, r20	; 0x06
		TFT_Window(X, Y, X+CellWidth*Scale-1, Y+CellHeight*Scale-1, Display_Orientation);//Aufruf der Funktion TFT_Window mit Übergabe von x1, x2, y1, y2 und Display-Ausrichtung
     b78:	98 2d       	mov	r25, r8
     b7a:	99 0f       	add	r25, r25
     b7c:	98 0d       	add	r25, r8
     b7e:	29 2f       	mov	r18, r25
     b80:	22 0f       	add	r18, r18
     b82:	28 0f       	add	r18, r24
     b84:	2a 83       	std	Y+2, r18	; 0x02
     b86:	28 2d       	mov	r18, r8
     b88:	22 0f       	add	r18, r18
     b8a:	22 0f       	add	r18, r18
     b8c:	22 0f       	add	r18, r18
     b8e:	28 0d       	add	r18, r8
     b90:	fd 81       	ldd	r31, Y+5	; 0x05
     b92:	2f 0f       	add	r18, r31
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	4a 81       	ldd	r20, Y+2	; 0x02
     b98:	41 50       	subi	r20, 0x01	; 1
     b9a:	08 85       	ldd	r16, Y+8	; 0x08
     b9c:	6f 2f       	mov	r22, r31
     b9e:	0e 94 da 04 	call	0x9b4	; 0x9b4 <TFT_Window>
		BytePos = Ch * CharHeight;
     ba2:	2e 81       	ldd	r18, Y+6	; 0x06
     ba4:	82 2f       	mov	r24, r18
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	fc 01       	movw	r30, r24
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	ff 83       	std	Y+7, r31	; 0x07
     bb8:	ee 83       	std	Y+6, r30	; 0x06

		for (Loop=0; Loop < CellHeight; ++Loop)			//Zählschleife, um Byte pro Byte eines Zeichens (insgesamt 8 Byte pro Zeichen) ein zu lesen
     bba:	41 2c       	mov	r4, r1
     bbc:	51 2c       	mov	r5, r1
     bbe:	5d c0       	rjmp	.+186    	; 0xc7a <TFT_Print+0x190>
		{
			Byte = Font[BytePos+Loop];									//Byte-Wert des Zeichens holen (zeilenweise) aus Schrifttabelle
     bc0:	ee 81       	ldd	r30, Y+6	; 0x06
     bc2:	ff 81       	ldd	r31, Y+7	; 0x07
     bc4:	e4 0d       	add	r30, r4
     bc6:	f5 1d       	adc	r31, r5
     bc8:	ec 5d       	subi	r30, 0xDC	; 220
     bca:	fd 4f       	sbci	r31, 0xFD	; 253
     bcc:	60 80       	ld	r6, Z
			if (Loop >= CharHeight) Byte = 0;						//Zeilen mit Hintergrundfarbe am unteren Ende des Zeichens
     bce:	f8 e0       	ldi	r31, 0x08	; 8
     bd0:	4f 16       	cp	r4, r31
     bd2:	51 04       	cpc	r5, r1
     bd4:	08 f0       	brcs	.+2      	; 0xbd8 <TFT_Print+0xee>
     bd6:	61 2c       	mov	r6, r1
			for (Pixel=1; Pixel <= Scale; ++Pixel)			//Wiederholungen gemäß Scale-Faktor; z.B. bei scale=2 wird die Zeile zweimal gezeichnet
     bd8:	aa 24       	eor	r10, r10
     bda:	a3 94       	inc	r10
     bdc:	b1 2c       	mov	r11, r1
     bde:	44 c0       	rjmp	.+136    	; 0xc68 <TFT_Print+0x17e>
			{
				XPixelTmp = (CellWidth-CharWidth)*Scale;	//Anzahl der leeren Spalten abhängig vom Schrifttyp (hier ist nur ein Typ eingebunden) und der Scalierung
     be0:	08 2d       	mov	r16, r8
     be2:	10 e0       	ldi	r17, 0x00	; 0
				for (Charbit=1; Charbit<=XPixelTmp; ++Charbit)
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	3a 87       	std	Y+10, r19	; 0x0a
     bea:	29 87       	std	Y+9, r18	; 0x09
     bec:	09 c0       	rjmp	.+18     	; 0xc00 <TFT_Print+0x116>
				{
					//Leere Spalte => wird immer mit der Hintergrundfarbe dargestellt
					TFT_SPI_16BitPixelSend(BackColor);			//Aufruf der Funktion TFT_SPI_16BitPixelSend mit der Übergabe der Hintergrundfarbe
     bee:	8e 2d       	mov	r24, r14
     bf0:	9f 2d       	mov	r25, r15
     bf2:	0e 94 6b 05 	call	0xad6	; 0xad6 <TFT_SPI_16BitPixelSend>
			Byte = Font[BytePos+Loop];									//Byte-Wert des Zeichens holen (zeilenweise) aus Schrifttabelle
			if (Loop >= CharHeight) Byte = 0;						//Zeilen mit Hintergrundfarbe am unteren Ende des Zeichens
			for (Pixel=1; Pixel <= Scale; ++Pixel)			//Wiederholungen gemäß Scale-Faktor; z.B. bei scale=2 wird die Zeile zweimal gezeichnet
			{
				XPixelTmp = (CellWidth-CharWidth)*Scale;	//Anzahl der leeren Spalten abhängig vom Schrifttyp (hier ist nur ein Typ eingebunden) und der Scalierung
				for (Charbit=1; Charbit<=XPixelTmp; ++Charbit)
     bf6:	89 85       	ldd	r24, Y+9	; 0x09
     bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	9a 87       	std	Y+10, r25	; 0x0a
     bfe:	89 87       	std	Y+9, r24	; 0x09
     c00:	e9 85       	ldd	r30, Y+9	; 0x09
     c02:	fa 85       	ldd	r31, Y+10	; 0x0a
     c04:	0e 17       	cp	r16, r30
     c06:	1f 07       	cpc	r17, r31
     c08:	94 f7       	brge	.-28     	; 0xbee <TFT_Print+0x104>
     c0a:	68 94       	set
     c0c:	cc 24       	eor	r12, r12
     c0e:	c2 f8       	bld	r12, 2
     c10:	d1 2c       	mov	r13, r1
     c12:	25 c0       	rjmp	.+74     	; 0xc5e <TFT_Print+0x174>
				}

				for (Charbit=CharWidth-1; Charbit>=0; --Charbit)	//prüfen aller Bits pro Zeile eines Zeichens (ein Zeichen hat inkl. Leerzeile 9 Zeilen)
				{
					//Prüfen, ob für das Schriftzeichen das Pixel in der Schriftfarbe oder in der Hintergrundfarbe dargestellt werden muss
					if ( (Byte >> Charbit) & 0x01 )
     c14:	86 2d       	mov	r24, r6
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0c 2c       	mov	r0, r12
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <TFT_Print+0x136>
     c1c:	95 95       	asr	r25
     c1e:	87 95       	ror	r24
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <TFT_Print+0x132>
     c24:	80 ff       	sbrs	r24, 0
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <TFT_Print+0x144>
					   Color = ForeColor;						    		//pixel = 1: Schriftfarbe
     c28:	39 2c       	mov	r3, r9
     c2a:	27 2c       	mov	r2, r7
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <TFT_Print+0x148>
					else
					    Color = BackColor;									//pixel = 0: Hintergrundfarbe
     c2e:	3e 2c       	mov	r3, r14
     c30:	2f 2c       	mov	r2, r15
					for (C=1; C<=Scale; ++C)								//Anzahl der horizontalen Wiederholungen abhängig vom Skalierungsfaktor (scale),z.B. scale=2 => 2 Pixel
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	3a 87       	std	Y+10, r19	; 0x0a
     c38:	29 87       	std	Y+9, r18	; 0x09
     c3a:	09 c0       	rjmp	.+18     	; 0xc4e <TFT_Print+0x164>
						TFT_SPI_16BitPixelSend(Color);  			//zeichne Pixel entweder mit der Schriftfarbe oder mit der Hintergrundfarbe
     c3c:	83 2d       	mov	r24, r3
     c3e:	92 2d       	mov	r25, r2
     c40:	0e 94 6b 05 	call	0xad6	; 0xad6 <TFT_SPI_16BitPixelSend>
					//Prüfen, ob für das Schriftzeichen das Pixel in der Schriftfarbe oder in der Hintergrundfarbe dargestellt werden muss
					if ( (Byte >> Charbit) & 0x01 )
					   Color = ForeColor;						    		//pixel = 1: Schriftfarbe
					else
					    Color = BackColor;									//pixel = 0: Hintergrundfarbe
					for (C=1; C<=Scale; ++C)								//Anzahl der horizontalen Wiederholungen abhängig vom Skalierungsfaktor (scale),z.B. scale=2 => 2 Pixel
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	9a 87       	std	Y+10, r25	; 0x0a
     c4c:	89 87       	std	Y+9, r24	; 0x09
     c4e:	e9 85       	ldd	r30, Y+9	; 0x09
     c50:	fa 85       	ldd	r31, Y+10	; 0x0a
     c52:	0e 17       	cp	r16, r30
     c54:	1f 07       	cpc	r17, r31
     c56:	94 f7       	brge	.-28     	; 0xc3c <TFT_Print+0x152>
				{
					//Leere Spalte => wird immer mit der Hintergrundfarbe dargestellt
					TFT_SPI_16BitPixelSend(BackColor);			//Aufruf der Funktion TFT_SPI_16BitPixelSend mit der Übergabe der Hintergrundfarbe
				}

				for (Charbit=CharWidth-1; Charbit>=0; --Charbit)	//prüfen aller Bits pro Zeile eines Zeichens (ein Zeichen hat inkl. Leerzeile 9 Zeilen)
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	cf 1a       	sub	r12, r31
     c5c:	d1 08       	sbc	r13, r1
     c5e:	dd 20       	and	r13, r13
     c60:	cc f6       	brge	.-78     	; 0xc14 <TFT_Print+0x12a>

		for (Loop=0; Loop < CellHeight; ++Loop)			//Zählschleife, um Byte pro Byte eines Zeichens (insgesamt 8 Byte pro Zeichen) ein zu lesen
		{
			Byte = Font[BytePos+Loop];									//Byte-Wert des Zeichens holen (zeilenweise) aus Schrifttabelle
			if (Loop >= CharHeight) Byte = 0;						//Zeilen mit Hintergrundfarbe am unteren Ende des Zeichens
			for (Pixel=1; Pixel <= Scale; ++Pixel)			//Wiederholungen gemäß Scale-Faktor; z.B. bei scale=2 wird die Zeile zweimal gezeichnet
     c62:	2f ef       	ldi	r18, 0xFF	; 255
     c64:	a2 1a       	sub	r10, r18
     c66:	b2 0a       	sbc	r11, r18
     c68:	88 2d       	mov	r24, r8
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	8a 15       	cp	r24, r10
     c6e:	9b 05       	cpc	r25, r11
     c70:	08 f0       	brcs	.+2      	; 0xc74 <TFT_Print+0x18a>
     c72:	b6 cf       	rjmp	.-148    	; 0xbe0 <TFT_Print+0xf6>
		
		Ch -= 32; 	//von Ch wird 32 abgezogen, da wir keine ASCII-Zeichen kleiner als ASCII 32 verwenden; die Schrifttabelle startet mit ASCII 32, das ist das Leerzeichen
		TFT_Window(X, Y, X+CellWidth*Scale-1, Y+CellHeight*Scale-1, Display_Orientation);//Aufruf der Funktion TFT_Window mit Übergabe von x1, x2, y1, y2 und Display-Ausrichtung
		BytePos = Ch * CharHeight;

		for (Loop=0; Loop < CellHeight; ++Loop)			//Zählschleife, um Byte pro Byte eines Zeichens (insgesamt 8 Byte pro Zeichen) ein zu lesen
     c74:	3f ef       	ldi	r19, 0xFF	; 255
     c76:	43 1a       	sub	r4, r19
     c78:	53 0a       	sbc	r5, r19
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	48 16       	cp	r4, r24
     c7e:	51 04       	cpc	r5, r1
     c80:	08 f4       	brcc	.+2      	; 0xc84 <TFT_Print+0x19a>
     c82:	9e cf       	rjmp	.-196    	; 0xbc0 <TFT_Print+0xd6>
					for (C=1; C<=Scale; ++C)								//Anzahl der horizontalen Wiederholungen abhängig vom Skalierungsfaktor (scale),z.B. scale=2 => 2 Pixel
						TFT_SPI_16BitPixelSend(Color);  			//zeichne Pixel entweder mit der Schriftfarbe oder mit der Hintergrundfarbe
				}				//prüfe nächstes Bit des Schriftzeichens
			}					//Abhängig vom Scale-Faktor wird die Zeile erneut gezeichnet
		}
		Index++;
     c84:	99 81       	ldd	r25, Y+1	; 0x01
     c86:	9f 5f       	subi	r25, 0xFF	; 255
     c88:	99 83       	std	Y+1, r25	; 0x01
		Ch = Text[Index];
     c8a:	eb 81       	ldd	r30, Y+3	; 0x03
     c8c:	fc 81       	ldd	r31, Y+4	; 0x04
     c8e:	e9 0f       	add	r30, r25
     c90:	f1 1d       	adc	r31, r1
     c92:	40 81       	ld	r20, Z
		X += CellWidth*Scale;		
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
		CellWidth = 6;	//Anzahl der Pixel der Schriftbreite inkl. Leerzeichen; hier kann man den Buchstabenabstand verändern
		CellHeight = 9;	//Anzahl der Pixel der Schrifthöhe inkl. Leerzeichen; hier kann man den Zeilenabstand verändern

		Index = 0;
		Ch = Text[Index];				//in Ch wird der Wert (ASCII 32) des darzustellen Zeichens abgelegt
    while( Ch != 0x00 )
     c96:	41 11       	cpse	r20, r1
     c98:	4f cf       	rjmp	.-354    	; 0xb38 <TFT_Print+0x4e>
		}
		Index++;
		Ch = Text[Index];
		X += CellWidth*Scale;		
	}
}
     c9a:	2a 96       	adiw	r28, 0x0a	; 10
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	cf 90       	pop	r12
     cb6:	bf 90       	pop	r11
     cb8:	af 90       	pop	r10
     cba:	9f 90       	pop	r9
     cbc:	8f 90       	pop	r8
     cbe:	7f 90       	pop	r7
     cc0:	6f 90       	pop	r6
     cc2:	5f 90       	pop	r5
     cc4:	4f 90       	pop	r4
     cc6:	3f 90       	pop	r3
     cc8:	2f 90       	pop	r2
     cca:	08 95       	ret

00000ccc <__tablejump2__>:
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	05 90       	lpm	r0, Z+
     cd2:	f4 91       	lpm	r31, Z
     cd4:	e0 2d       	mov	r30, r0
     cd6:	09 94       	ijmp

00000cd8 <__umulhisi3>:
     cd8:	a2 9f       	mul	r26, r18
     cda:	b0 01       	movw	r22, r0
     cdc:	b3 9f       	mul	r27, r19
     cde:	c0 01       	movw	r24, r0
     ce0:	a3 9f       	mul	r26, r19
     ce2:	70 0d       	add	r23, r0
     ce4:	81 1d       	adc	r24, r1
     ce6:	11 24       	eor	r1, r1
     ce8:	91 1d       	adc	r25, r1
     cea:	b2 9f       	mul	r27, r18
     cec:	70 0d       	add	r23, r0
     cee:	81 1d       	adc	r24, r1
     cf0:	11 24       	eor	r1, r1
     cf2:	91 1d       	adc	r25, r1
     cf4:	08 95       	ret

00000cf6 <itoa>:
     cf6:	45 32       	cpi	r20, 0x25	; 37
     cf8:	51 05       	cpc	r21, r1
     cfa:	20 f4       	brcc	.+8      	; 0xd04 <itoa+0xe>
     cfc:	42 30       	cpi	r20, 0x02	; 2
     cfe:	10 f0       	brcs	.+4      	; 0xd04 <itoa+0xe>
     d00:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__itoa_ncheck>
     d04:	fb 01       	movw	r30, r22
     d06:	10 82       	st	Z, r1
     d08:	cb 01       	movw	r24, r22
     d0a:	08 95       	ret

00000d0c <__itoa_ncheck>:
     d0c:	bb 27       	eor	r27, r27
     d0e:	4a 30       	cpi	r20, 0x0A	; 10
     d10:	31 f4       	brne	.+12     	; 0xd1e <__itoa_ncheck+0x12>
     d12:	99 23       	and	r25, r25
     d14:	22 f4       	brpl	.+8      	; 0xd1e <__itoa_ncheck+0x12>
     d16:	bd e2       	ldi	r27, 0x2D	; 45
     d18:	90 95       	com	r25
     d1a:	81 95       	neg	r24
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__utoa_common>

00000d22 <__utoa_ncheck>:
     d22:	bb 27       	eor	r27, r27

00000d24 <__utoa_common>:
     d24:	fb 01       	movw	r30, r22
     d26:	55 27       	eor	r21, r21
     d28:	aa 27       	eor	r26, r26
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	aa 1f       	adc	r26, r26
     d30:	a4 17       	cp	r26, r20
     d32:	10 f0       	brcs	.+4      	; 0xd38 <__utoa_common+0x14>
     d34:	a4 1b       	sub	r26, r20
     d36:	83 95       	inc	r24
     d38:	50 51       	subi	r21, 0x10	; 16
     d3a:	b9 f7       	brne	.-18     	; 0xd2a <__utoa_common+0x6>
     d3c:	a0 5d       	subi	r26, 0xD0	; 208
     d3e:	aa 33       	cpi	r26, 0x3A	; 58
     d40:	08 f0       	brcs	.+2      	; 0xd44 <__utoa_common+0x20>
     d42:	a9 5d       	subi	r26, 0xD9	; 217
     d44:	a1 93       	st	Z+, r26
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	79 f7       	brne	.-34     	; 0xd28 <__utoa_common+0x4>
     d4a:	b1 11       	cpse	r27, r1
     d4c:	b1 93       	st	Z+, r27
     d4e:	11 92       	st	Z+, r1
     d50:	cb 01       	movw	r24, r22
     d52:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <strrev>

00000d56 <snprintf>:
     d56:	ae e0       	ldi	r26, 0x0E	; 14
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e1 eb       	ldi	r30, 0xB1	; 177
     d5c:	f6 e0       	ldi	r31, 0x06	; 6
     d5e:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__prologue_saves__+0x1c>
     d62:	0d 89       	ldd	r16, Y+21	; 0x15
     d64:	1e 89       	ldd	r17, Y+22	; 0x16
     d66:	8f 89       	ldd	r24, Y+23	; 0x17
     d68:	98 8d       	ldd	r25, Y+24	; 0x18
     d6a:	26 e0       	ldi	r18, 0x06	; 6
     d6c:	2c 83       	std	Y+4, r18	; 0x04
     d6e:	1a 83       	std	Y+2, r17	; 0x02
     d70:	09 83       	std	Y+1, r16	; 0x01
     d72:	97 ff       	sbrs	r25, 7
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <snprintf+0x24>
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e8       	ldi	r25, 0x80	; 128
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
     d80:	ae 01       	movw	r20, r28
     d82:	45 5e       	subi	r20, 0xE5	; 229
     d84:	5f 4f       	sbci	r21, 0xFF	; 255
     d86:	69 8d       	ldd	r22, Y+25	; 0x19
     d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <vfprintf>
     d92:	4d 81       	ldd	r20, Y+5	; 0x05
     d94:	5e 81       	ldd	r21, Y+6	; 0x06
     d96:	57 fd       	sbrc	r21, 7
     d98:	0a c0       	rjmp	.+20     	; 0xdae <snprintf+0x58>
     d9a:	2f 81       	ldd	r18, Y+7	; 0x07
     d9c:	38 85       	ldd	r19, Y+8	; 0x08
     d9e:	42 17       	cp	r20, r18
     da0:	53 07       	cpc	r21, r19
     da2:	0c f4       	brge	.+2      	; 0xda6 <snprintf+0x50>
     da4:	9a 01       	movw	r18, r20
     da6:	f8 01       	movw	r30, r16
     da8:	e2 0f       	add	r30, r18
     daa:	f3 1f       	adc	r31, r19
     dac:	10 82       	st	Z, r1
     dae:	2e 96       	adiw	r28, 0x0e	; 14
     db0:	e4 e0       	ldi	r30, 0x04	; 4
     db2:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__epilogue_restores__+0x1c>

00000db6 <vfprintf>:
     db6:	ab e0       	ldi	r26, 0x0B	; 11
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e1 ee       	ldi	r30, 0xE1	; 225
     dbc:	f6 e0       	ldi	r31, 0x06	; 6
     dbe:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__prologue_saves__>
     dc2:	6c 01       	movw	r12, r24
     dc4:	7b 01       	movw	r14, r22
     dc6:	8a 01       	movw	r16, r20
     dc8:	fc 01       	movw	r30, r24
     dca:	17 82       	std	Z+7, r1	; 0x07
     dcc:	16 82       	std	Z+6, r1	; 0x06
     dce:	83 81       	ldd	r24, Z+3	; 0x03
     dd0:	81 ff       	sbrs	r24, 1
     dd2:	cc c1       	rjmp	.+920    	; 0x116c <vfprintf+0x3b6>
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	3c 01       	movw	r6, r24
     dda:	f6 01       	movw	r30, r12
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	f7 01       	movw	r30, r14
     de0:	93 fd       	sbrc	r25, 3
     de2:	85 91       	lpm	r24, Z+
     de4:	93 ff       	sbrs	r25, 3
     de6:	81 91       	ld	r24, Z+
     de8:	7f 01       	movw	r14, r30
     dea:	88 23       	and	r24, r24
     dec:	09 f4       	brne	.+2      	; 0xdf0 <vfprintf+0x3a>
     dee:	ba c1       	rjmp	.+884    	; 0x1164 <vfprintf+0x3ae>
     df0:	85 32       	cpi	r24, 0x25	; 37
     df2:	39 f4       	brne	.+14     	; 0xe02 <vfprintf+0x4c>
     df4:	93 fd       	sbrc	r25, 3
     df6:	85 91       	lpm	r24, Z+
     df8:	93 ff       	sbrs	r25, 3
     dfa:	81 91       	ld	r24, Z+
     dfc:	7f 01       	movw	r14, r30
     dfe:	85 32       	cpi	r24, 0x25	; 37
     e00:	29 f4       	brne	.+10     	; 0xe0c <vfprintf+0x56>
     e02:	b6 01       	movw	r22, r12
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
     e0a:	e7 cf       	rjmp	.-50     	; 0xdda <vfprintf+0x24>
     e0c:	91 2c       	mov	r9, r1
     e0e:	21 2c       	mov	r2, r1
     e10:	31 2c       	mov	r3, r1
     e12:	ff e1       	ldi	r31, 0x1F	; 31
     e14:	f3 15       	cp	r31, r3
     e16:	d8 f0       	brcs	.+54     	; 0xe4e <vfprintf+0x98>
     e18:	8b 32       	cpi	r24, 0x2B	; 43
     e1a:	79 f0       	breq	.+30     	; 0xe3a <vfprintf+0x84>
     e1c:	38 f4       	brcc	.+14     	; 0xe2c <vfprintf+0x76>
     e1e:	80 32       	cpi	r24, 0x20	; 32
     e20:	79 f0       	breq	.+30     	; 0xe40 <vfprintf+0x8a>
     e22:	83 32       	cpi	r24, 0x23	; 35
     e24:	a1 f4       	brne	.+40     	; 0xe4e <vfprintf+0x98>
     e26:	23 2d       	mov	r18, r3
     e28:	20 61       	ori	r18, 0x10	; 16
     e2a:	1d c0       	rjmp	.+58     	; 0xe66 <vfprintf+0xb0>
     e2c:	8d 32       	cpi	r24, 0x2D	; 45
     e2e:	61 f0       	breq	.+24     	; 0xe48 <vfprintf+0x92>
     e30:	80 33       	cpi	r24, 0x30	; 48
     e32:	69 f4       	brne	.+26     	; 0xe4e <vfprintf+0x98>
     e34:	23 2d       	mov	r18, r3
     e36:	21 60       	ori	r18, 0x01	; 1
     e38:	16 c0       	rjmp	.+44     	; 0xe66 <vfprintf+0xb0>
     e3a:	83 2d       	mov	r24, r3
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	38 2e       	mov	r3, r24
     e40:	e3 2d       	mov	r30, r3
     e42:	e4 60       	ori	r30, 0x04	; 4
     e44:	3e 2e       	mov	r3, r30
     e46:	2a c0       	rjmp	.+84     	; 0xe9c <vfprintf+0xe6>
     e48:	f3 2d       	mov	r31, r3
     e4a:	f8 60       	ori	r31, 0x08	; 8
     e4c:	1d c0       	rjmp	.+58     	; 0xe88 <vfprintf+0xd2>
     e4e:	37 fc       	sbrc	r3, 7
     e50:	2d c0       	rjmp	.+90     	; 0xeac <vfprintf+0xf6>
     e52:	20 ed       	ldi	r18, 0xD0	; 208
     e54:	28 0f       	add	r18, r24
     e56:	2a 30       	cpi	r18, 0x0A	; 10
     e58:	40 f0       	brcs	.+16     	; 0xe6a <vfprintf+0xb4>
     e5a:	8e 32       	cpi	r24, 0x2E	; 46
     e5c:	b9 f4       	brne	.+46     	; 0xe8c <vfprintf+0xd6>
     e5e:	36 fc       	sbrc	r3, 6
     e60:	81 c1       	rjmp	.+770    	; 0x1164 <vfprintf+0x3ae>
     e62:	23 2d       	mov	r18, r3
     e64:	20 64       	ori	r18, 0x40	; 64
     e66:	32 2e       	mov	r3, r18
     e68:	19 c0       	rjmp	.+50     	; 0xe9c <vfprintf+0xe6>
     e6a:	36 fe       	sbrs	r3, 6
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <vfprintf+0xc4>
     e6e:	8a e0       	ldi	r24, 0x0A	; 10
     e70:	98 9e       	mul	r9, r24
     e72:	20 0d       	add	r18, r0
     e74:	11 24       	eor	r1, r1
     e76:	92 2e       	mov	r9, r18
     e78:	11 c0       	rjmp	.+34     	; 0xe9c <vfprintf+0xe6>
     e7a:	ea e0       	ldi	r30, 0x0A	; 10
     e7c:	2e 9e       	mul	r2, r30
     e7e:	20 0d       	add	r18, r0
     e80:	11 24       	eor	r1, r1
     e82:	22 2e       	mov	r2, r18
     e84:	f3 2d       	mov	r31, r3
     e86:	f0 62       	ori	r31, 0x20	; 32
     e88:	3f 2e       	mov	r3, r31
     e8a:	08 c0       	rjmp	.+16     	; 0xe9c <vfprintf+0xe6>
     e8c:	8c 36       	cpi	r24, 0x6C	; 108
     e8e:	21 f4       	brne	.+8      	; 0xe98 <vfprintf+0xe2>
     e90:	83 2d       	mov	r24, r3
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	38 2e       	mov	r3, r24
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <vfprintf+0xe6>
     e98:	88 36       	cpi	r24, 0x68	; 104
     e9a:	41 f4       	brne	.+16     	; 0xeac <vfprintf+0xf6>
     e9c:	f7 01       	movw	r30, r14
     e9e:	93 fd       	sbrc	r25, 3
     ea0:	85 91       	lpm	r24, Z+
     ea2:	93 ff       	sbrs	r25, 3
     ea4:	81 91       	ld	r24, Z+
     ea6:	7f 01       	movw	r14, r30
     ea8:	81 11       	cpse	r24, r1
     eaa:	b3 cf       	rjmp	.-154    	; 0xe12 <vfprintf+0x5c>
     eac:	98 2f       	mov	r25, r24
     eae:	9f 7d       	andi	r25, 0xDF	; 223
     eb0:	95 54       	subi	r25, 0x45	; 69
     eb2:	93 30       	cpi	r25, 0x03	; 3
     eb4:	28 f4       	brcc	.+10     	; 0xec0 <vfprintf+0x10a>
     eb6:	0c 5f       	subi	r16, 0xFC	; 252
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
     eba:	9f e3       	ldi	r25, 0x3F	; 63
     ebc:	99 83       	std	Y+1, r25	; 0x01
     ebe:	0d c0       	rjmp	.+26     	; 0xeda <vfprintf+0x124>
     ec0:	83 36       	cpi	r24, 0x63	; 99
     ec2:	31 f0       	breq	.+12     	; 0xed0 <vfprintf+0x11a>
     ec4:	83 37       	cpi	r24, 0x73	; 115
     ec6:	71 f0       	breq	.+28     	; 0xee4 <vfprintf+0x12e>
     ec8:	83 35       	cpi	r24, 0x53	; 83
     eca:	09 f0       	breq	.+2      	; 0xece <vfprintf+0x118>
     ecc:	59 c0       	rjmp	.+178    	; 0xf80 <vfprintf+0x1ca>
     ece:	21 c0       	rjmp	.+66     	; 0xf12 <vfprintf+0x15c>
     ed0:	f8 01       	movw	r30, r16
     ed2:	80 81       	ld	r24, Z
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	0e 5f       	subi	r16, 0xFE	; 254
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	88 24       	eor	r8, r8
     edc:	83 94       	inc	r8
     ede:	91 2c       	mov	r9, r1
     ee0:	53 01       	movw	r10, r6
     ee2:	13 c0       	rjmp	.+38     	; 0xf0a <vfprintf+0x154>
     ee4:	28 01       	movw	r4, r16
     ee6:	f2 e0       	ldi	r31, 0x02	; 2
     ee8:	4f 0e       	add	r4, r31
     eea:	51 1c       	adc	r5, r1
     eec:	f8 01       	movw	r30, r16
     eee:	a0 80       	ld	r10, Z
     ef0:	b1 80       	ldd	r11, Z+1	; 0x01
     ef2:	36 fe       	sbrs	r3, 6
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <vfprintf+0x146>
     ef6:	69 2d       	mov	r22, r9
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <vfprintf+0x14a>
     efc:	6f ef       	ldi	r22, 0xFF	; 255
     efe:	7f ef       	ldi	r23, 0xFF	; 255
     f00:	c5 01       	movw	r24, r10
     f02:	0e 94 c7 08 	call	0x118e	; 0x118e <strnlen>
     f06:	4c 01       	movw	r8, r24
     f08:	82 01       	movw	r16, r4
     f0a:	f3 2d       	mov	r31, r3
     f0c:	ff 77       	andi	r31, 0x7F	; 127
     f0e:	3f 2e       	mov	r3, r31
     f10:	16 c0       	rjmp	.+44     	; 0xf3e <vfprintf+0x188>
     f12:	28 01       	movw	r4, r16
     f14:	22 e0       	ldi	r18, 0x02	; 2
     f16:	42 0e       	add	r4, r18
     f18:	51 1c       	adc	r5, r1
     f1a:	f8 01       	movw	r30, r16
     f1c:	a0 80       	ld	r10, Z
     f1e:	b1 80       	ldd	r11, Z+1	; 0x01
     f20:	36 fe       	sbrs	r3, 6
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <vfprintf+0x174>
     f24:	69 2d       	mov	r22, r9
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <vfprintf+0x178>
     f2a:	6f ef       	ldi	r22, 0xFF	; 255
     f2c:	7f ef       	ldi	r23, 0xFF	; 255
     f2e:	c5 01       	movw	r24, r10
     f30:	0e 94 bc 08 	call	0x1178	; 0x1178 <strnlen_P>
     f34:	4c 01       	movw	r8, r24
     f36:	f3 2d       	mov	r31, r3
     f38:	f0 68       	ori	r31, 0x80	; 128
     f3a:	3f 2e       	mov	r3, r31
     f3c:	82 01       	movw	r16, r4
     f3e:	33 fc       	sbrc	r3, 3
     f40:	1b c0       	rjmp	.+54     	; 0xf78 <vfprintf+0x1c2>
     f42:	82 2d       	mov	r24, r2
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	88 16       	cp	r8, r24
     f48:	99 06       	cpc	r9, r25
     f4a:	b0 f4       	brcc	.+44     	; 0xf78 <vfprintf+0x1c2>
     f4c:	b6 01       	movw	r22, r12
     f4e:	80 e2       	ldi	r24, 0x20	; 32
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
     f56:	2a 94       	dec	r2
     f58:	f4 cf       	rjmp	.-24     	; 0xf42 <vfprintf+0x18c>
     f5a:	f5 01       	movw	r30, r10
     f5c:	37 fc       	sbrc	r3, 7
     f5e:	85 91       	lpm	r24, Z+
     f60:	37 fe       	sbrs	r3, 7
     f62:	81 91       	ld	r24, Z+
     f64:	5f 01       	movw	r10, r30
     f66:	b6 01       	movw	r22, r12
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
     f6e:	21 10       	cpse	r2, r1
     f70:	2a 94       	dec	r2
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	82 1a       	sub	r8, r18
     f76:	91 08       	sbc	r9, r1
     f78:	81 14       	cp	r8, r1
     f7a:	91 04       	cpc	r9, r1
     f7c:	71 f7       	brne	.-36     	; 0xf5a <vfprintf+0x1a4>
     f7e:	e8 c0       	rjmp	.+464    	; 0x1150 <vfprintf+0x39a>
     f80:	84 36       	cpi	r24, 0x64	; 100
     f82:	11 f0       	breq	.+4      	; 0xf88 <vfprintf+0x1d2>
     f84:	89 36       	cpi	r24, 0x69	; 105
     f86:	41 f5       	brne	.+80     	; 0xfd8 <vfprintf+0x222>
     f88:	f8 01       	movw	r30, r16
     f8a:	37 fe       	sbrs	r3, 7
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <vfprintf+0x1e6>
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	0c 5f       	subi	r16, 0xFC	; 252
     f98:	1f 4f       	sbci	r17, 0xFF	; 255
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <vfprintf+0x1f6>
     f9c:	60 81       	ld	r22, Z
     f9e:	71 81       	ldd	r23, Z+1	; 0x01
     fa0:	07 2e       	mov	r0, r23
     fa2:	00 0c       	add	r0, r0
     fa4:	88 0b       	sbc	r24, r24
     fa6:	99 0b       	sbc	r25, r25
     fa8:	0e 5f       	subi	r16, 0xFE	; 254
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	f3 2d       	mov	r31, r3
     fae:	ff 76       	andi	r31, 0x6F	; 111
     fb0:	3f 2e       	mov	r3, r31
     fb2:	97 ff       	sbrs	r25, 7
     fb4:	09 c0       	rjmp	.+18     	; 0xfc8 <vfprintf+0x212>
     fb6:	90 95       	com	r25
     fb8:	80 95       	com	r24
     fba:	70 95       	com	r23
     fbc:	61 95       	neg	r22
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	8f 4f       	sbci	r24, 0xFF	; 255
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	f0 68       	ori	r31, 0x80	; 128
     fc6:	3f 2e       	mov	r3, r31
     fc8:	2a e0       	ldi	r18, 0x0A	; 10
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	a3 01       	movw	r20, r6
     fce:	0e 94 1e 09 	call	0x123c	; 0x123c <__ultoa_invert>
     fd2:	88 2e       	mov	r8, r24
     fd4:	86 18       	sub	r8, r6
     fd6:	45 c0       	rjmp	.+138    	; 0x1062 <vfprintf+0x2ac>
     fd8:	85 37       	cpi	r24, 0x75	; 117
     fda:	31 f4       	brne	.+12     	; 0xfe8 <vfprintf+0x232>
     fdc:	23 2d       	mov	r18, r3
     fde:	2f 7e       	andi	r18, 0xEF	; 239
     fe0:	b2 2e       	mov	r11, r18
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	25 c0       	rjmp	.+74     	; 0x1032 <vfprintf+0x27c>
     fe8:	93 2d       	mov	r25, r3
     fea:	99 7f       	andi	r25, 0xF9	; 249
     fec:	b9 2e       	mov	r11, r25
     fee:	8f 36       	cpi	r24, 0x6F	; 111
     ff0:	c1 f0       	breq	.+48     	; 0x1022 <vfprintf+0x26c>
     ff2:	18 f4       	brcc	.+6      	; 0xffa <vfprintf+0x244>
     ff4:	88 35       	cpi	r24, 0x58	; 88
     ff6:	79 f0       	breq	.+30     	; 0x1016 <vfprintf+0x260>
     ff8:	b5 c0       	rjmp	.+362    	; 0x1164 <vfprintf+0x3ae>
     ffa:	80 37       	cpi	r24, 0x70	; 112
     ffc:	19 f0       	breq	.+6      	; 0x1004 <vfprintf+0x24e>
     ffe:	88 37       	cpi	r24, 0x78	; 120
    1000:	21 f0       	breq	.+8      	; 0x100a <vfprintf+0x254>
    1002:	b0 c0       	rjmp	.+352    	; 0x1164 <vfprintf+0x3ae>
    1004:	e9 2f       	mov	r30, r25
    1006:	e0 61       	ori	r30, 0x10	; 16
    1008:	be 2e       	mov	r11, r30
    100a:	b4 fe       	sbrs	r11, 4
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <vfprintf+0x272>
    100e:	fb 2d       	mov	r31, r11
    1010:	f4 60       	ori	r31, 0x04	; 4
    1012:	bf 2e       	mov	r11, r31
    1014:	09 c0       	rjmp	.+18     	; 0x1028 <vfprintf+0x272>
    1016:	34 fe       	sbrs	r3, 4
    1018:	0a c0       	rjmp	.+20     	; 0x102e <vfprintf+0x278>
    101a:	29 2f       	mov	r18, r25
    101c:	26 60       	ori	r18, 0x06	; 6
    101e:	b2 2e       	mov	r11, r18
    1020:	06 c0       	rjmp	.+12     	; 0x102e <vfprintf+0x278>
    1022:	28 e0       	ldi	r18, 0x08	; 8
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <vfprintf+0x27c>
    1028:	20 e1       	ldi	r18, 0x10	; 16
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <vfprintf+0x27c>
    102e:	20 e1       	ldi	r18, 0x10	; 16
    1030:	32 e0       	ldi	r19, 0x02	; 2
    1032:	f8 01       	movw	r30, r16
    1034:	b7 fe       	sbrs	r11, 7
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <vfprintf+0x290>
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	0c 5f       	subi	r16, 0xFC	; 252
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <vfprintf+0x29c>
    1046:	60 81       	ld	r22, Z
    1048:	71 81       	ldd	r23, Z+1	; 0x01
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 5f       	subi	r16, 0xFE	; 254
    1050:	1f 4f       	sbci	r17, 0xFF	; 255
    1052:	a3 01       	movw	r20, r6
    1054:	0e 94 1e 09 	call	0x123c	; 0x123c <__ultoa_invert>
    1058:	88 2e       	mov	r8, r24
    105a:	86 18       	sub	r8, r6
    105c:	fb 2d       	mov	r31, r11
    105e:	ff 77       	andi	r31, 0x7F	; 127
    1060:	3f 2e       	mov	r3, r31
    1062:	36 fe       	sbrs	r3, 6
    1064:	0d c0       	rjmp	.+26     	; 0x1080 <vfprintf+0x2ca>
    1066:	23 2d       	mov	r18, r3
    1068:	2e 7f       	andi	r18, 0xFE	; 254
    106a:	a2 2e       	mov	r10, r18
    106c:	89 14       	cp	r8, r9
    106e:	58 f4       	brcc	.+22     	; 0x1086 <vfprintf+0x2d0>
    1070:	34 fe       	sbrs	r3, 4
    1072:	0b c0       	rjmp	.+22     	; 0x108a <vfprintf+0x2d4>
    1074:	32 fc       	sbrc	r3, 2
    1076:	09 c0       	rjmp	.+18     	; 0x108a <vfprintf+0x2d4>
    1078:	83 2d       	mov	r24, r3
    107a:	8e 7e       	andi	r24, 0xEE	; 238
    107c:	a8 2e       	mov	r10, r24
    107e:	05 c0       	rjmp	.+10     	; 0x108a <vfprintf+0x2d4>
    1080:	b8 2c       	mov	r11, r8
    1082:	a3 2c       	mov	r10, r3
    1084:	03 c0       	rjmp	.+6      	; 0x108c <vfprintf+0x2d6>
    1086:	b8 2c       	mov	r11, r8
    1088:	01 c0       	rjmp	.+2      	; 0x108c <vfprintf+0x2d6>
    108a:	b9 2c       	mov	r11, r9
    108c:	a4 fe       	sbrs	r10, 4
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <vfprintf+0x2f8>
    1090:	fe 01       	movw	r30, r28
    1092:	e8 0d       	add	r30, r8
    1094:	f1 1d       	adc	r31, r1
    1096:	80 81       	ld	r24, Z
    1098:	80 33       	cpi	r24, 0x30	; 48
    109a:	21 f4       	brne	.+8      	; 0x10a4 <vfprintf+0x2ee>
    109c:	9a 2d       	mov	r25, r10
    109e:	99 7e       	andi	r25, 0xE9	; 233
    10a0:	a9 2e       	mov	r10, r25
    10a2:	09 c0       	rjmp	.+18     	; 0x10b6 <vfprintf+0x300>
    10a4:	a2 fe       	sbrs	r10, 2
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <vfprintf+0x2fe>
    10a8:	b3 94       	inc	r11
    10aa:	b3 94       	inc	r11
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <vfprintf+0x300>
    10ae:	8a 2d       	mov	r24, r10
    10b0:	86 78       	andi	r24, 0x86	; 134
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <vfprintf+0x300>
    10b4:	b3 94       	inc	r11
    10b6:	a3 fc       	sbrc	r10, 3
    10b8:	11 c0       	rjmp	.+34     	; 0x10dc <vfprintf+0x326>
    10ba:	a0 fe       	sbrs	r10, 0
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <vfprintf+0x314>
    10be:	b2 14       	cp	r11, r2
    10c0:	88 f4       	brcc	.+34     	; 0x10e4 <vfprintf+0x32e>
    10c2:	28 0c       	add	r2, r8
    10c4:	92 2c       	mov	r9, r2
    10c6:	9b 18       	sub	r9, r11
    10c8:	0e c0       	rjmp	.+28     	; 0x10e6 <vfprintf+0x330>
    10ca:	b2 14       	cp	r11, r2
    10cc:	60 f4       	brcc	.+24     	; 0x10e6 <vfprintf+0x330>
    10ce:	b6 01       	movw	r22, r12
    10d0:	80 e2       	ldi	r24, 0x20	; 32
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
    10d8:	b3 94       	inc	r11
    10da:	f7 cf       	rjmp	.-18     	; 0x10ca <vfprintf+0x314>
    10dc:	b2 14       	cp	r11, r2
    10de:	18 f4       	brcc	.+6      	; 0x10e6 <vfprintf+0x330>
    10e0:	2b 18       	sub	r2, r11
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <vfprintf+0x332>
    10e4:	98 2c       	mov	r9, r8
    10e6:	21 2c       	mov	r2, r1
    10e8:	a4 fe       	sbrs	r10, 4
    10ea:	10 c0       	rjmp	.+32     	; 0x110c <vfprintf+0x356>
    10ec:	b6 01       	movw	r22, r12
    10ee:	80 e3       	ldi	r24, 0x30	; 48
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
    10f6:	a2 fe       	sbrs	r10, 2
    10f8:	17 c0       	rjmp	.+46     	; 0x1128 <vfprintf+0x372>
    10fa:	a1 fc       	sbrc	r10, 1
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <vfprintf+0x34e>
    10fe:	88 e7       	ldi	r24, 0x78	; 120
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x352>
    1104:	88 e5       	ldi	r24, 0x58	; 88
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	b6 01       	movw	r22, r12
    110a:	0c c0       	rjmp	.+24     	; 0x1124 <vfprintf+0x36e>
    110c:	8a 2d       	mov	r24, r10
    110e:	86 78       	andi	r24, 0x86	; 134
    1110:	59 f0       	breq	.+22     	; 0x1128 <vfprintf+0x372>
    1112:	a1 fe       	sbrs	r10, 1
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x364>
    1116:	8b e2       	ldi	r24, 0x2B	; 43
    1118:	01 c0       	rjmp	.+2      	; 0x111c <vfprintf+0x366>
    111a:	80 e2       	ldi	r24, 0x20	; 32
    111c:	a7 fc       	sbrc	r10, 7
    111e:	8d e2       	ldi	r24, 0x2D	; 45
    1120:	b6 01       	movw	r22, r12
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
    1128:	89 14       	cp	r8, r9
    112a:	38 f4       	brcc	.+14     	; 0x113a <vfprintf+0x384>
    112c:	b6 01       	movw	r22, r12
    112e:	80 e3       	ldi	r24, 0x30	; 48
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
    1136:	9a 94       	dec	r9
    1138:	f7 cf       	rjmp	.-18     	; 0x1128 <vfprintf+0x372>
    113a:	8a 94       	dec	r8
    113c:	f3 01       	movw	r30, r6
    113e:	e8 0d       	add	r30, r8
    1140:	f1 1d       	adc	r31, r1
    1142:	80 81       	ld	r24, Z
    1144:	b6 01       	movw	r22, r12
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
    114c:	81 10       	cpse	r8, r1
    114e:	f5 cf       	rjmp	.-22     	; 0x113a <vfprintf+0x384>
    1150:	22 20       	and	r2, r2
    1152:	09 f4       	brne	.+2      	; 0x1156 <vfprintf+0x3a0>
    1154:	42 ce       	rjmp	.-892    	; 0xdda <vfprintf+0x24>
    1156:	b6 01       	movw	r22, r12
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <fputc>
    1160:	2a 94       	dec	r2
    1162:	f6 cf       	rjmp	.-20     	; 0x1150 <vfprintf+0x39a>
    1164:	f6 01       	movw	r30, r12
    1166:	86 81       	ldd	r24, Z+6	; 0x06
    1168:	97 81       	ldd	r25, Z+7	; 0x07
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <vfprintf+0x3ba>
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	9f ef       	ldi	r25, 0xFF	; 255
    1170:	2b 96       	adiw	r28, 0x0b	; 11
    1172:	e2 e1       	ldi	r30, 0x12	; 18
    1174:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__epilogue_restores__>

00001178 <strnlen_P>:
    1178:	fc 01       	movw	r30, r24
    117a:	05 90       	lpm	r0, Z+
    117c:	61 50       	subi	r22, 0x01	; 1
    117e:	70 40       	sbci	r23, 0x00	; 0
    1180:	01 10       	cpse	r0, r1
    1182:	d8 f7       	brcc	.-10     	; 0x117a <strnlen_P+0x2>
    1184:	80 95       	com	r24
    1186:	90 95       	com	r25
    1188:	8e 0f       	add	r24, r30
    118a:	9f 1f       	adc	r25, r31
    118c:	08 95       	ret

0000118e <strnlen>:
    118e:	fc 01       	movw	r30, r24
    1190:	61 50       	subi	r22, 0x01	; 1
    1192:	70 40       	sbci	r23, 0x00	; 0
    1194:	01 90       	ld	r0, Z+
    1196:	01 10       	cpse	r0, r1
    1198:	d8 f7       	brcc	.-10     	; 0x1190 <strnlen+0x2>
    119a:	80 95       	com	r24
    119c:	90 95       	com	r25
    119e:	8e 0f       	add	r24, r30
    11a0:	9f 1f       	adc	r25, r31
    11a2:	08 95       	ret

000011a4 <strrev>:
    11a4:	dc 01       	movw	r26, r24
    11a6:	fc 01       	movw	r30, r24
    11a8:	67 2f       	mov	r22, r23
    11aa:	71 91       	ld	r23, Z+
    11ac:	77 23       	and	r23, r23
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <strrev+0x4>
    11b0:	32 97       	sbiw	r30, 0x02	; 2
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <strrev+0x18>
    11b4:	7c 91       	ld	r23, X
    11b6:	6d 93       	st	X+, r22
    11b8:	70 83       	st	Z, r23
    11ba:	62 91       	ld	r22, -Z
    11bc:	ae 17       	cp	r26, r30
    11be:	bf 07       	cpc	r27, r31
    11c0:	c8 f3       	brcs	.-14     	; 0x11b4 <strrev+0x10>
    11c2:	08 95       	ret

000011c4 <fputc>:
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	fb 01       	movw	r30, r22
    11ce:	23 81       	ldd	r18, Z+3	; 0x03
    11d0:	21 fd       	sbrc	r18, 1
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <fputc+0x16>
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	9f ef       	ldi	r25, 0xFF	; 255
    11d8:	2c c0       	rjmp	.+88     	; 0x1232 <fputc+0x6e>
    11da:	22 ff       	sbrs	r18, 2
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <fputc+0x46>
    11de:	46 81       	ldd	r20, Z+6	; 0x06
    11e0:	57 81       	ldd	r21, Z+7	; 0x07
    11e2:	24 81       	ldd	r18, Z+4	; 0x04
    11e4:	35 81       	ldd	r19, Z+5	; 0x05
    11e6:	42 17       	cp	r20, r18
    11e8:	53 07       	cpc	r21, r19
    11ea:	44 f4       	brge	.+16     	; 0x11fc <fputc+0x38>
    11ec:	a0 81       	ld	r26, Z
    11ee:	b1 81       	ldd	r27, Z+1	; 0x01
    11f0:	9d 01       	movw	r18, r26
    11f2:	2f 5f       	subi	r18, 0xFF	; 255
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	31 83       	std	Z+1, r19	; 0x01
    11f8:	20 83       	st	Z, r18
    11fa:	8c 93       	st	X, r24
    11fc:	26 81       	ldd	r18, Z+6	; 0x06
    11fe:	37 81       	ldd	r19, Z+7	; 0x07
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	37 83       	std	Z+7, r19	; 0x07
    1206:	26 83       	std	Z+6, r18	; 0x06
    1208:	14 c0       	rjmp	.+40     	; 0x1232 <fputc+0x6e>
    120a:	8b 01       	movw	r16, r22
    120c:	ec 01       	movw	r28, r24
    120e:	fb 01       	movw	r30, r22
    1210:	00 84       	ldd	r0, Z+8	; 0x08
    1212:	f1 85       	ldd	r31, Z+9	; 0x09
    1214:	e0 2d       	mov	r30, r0
    1216:	09 95       	icall
    1218:	89 2b       	or	r24, r25
    121a:	e1 f6       	brne	.-72     	; 0x11d4 <fputc+0x10>
    121c:	d8 01       	movw	r26, r16
    121e:	16 96       	adiw	r26, 0x06	; 6
    1220:	8d 91       	ld	r24, X+
    1222:	9c 91       	ld	r25, X
    1224:	17 97       	sbiw	r26, 0x07	; 7
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	17 96       	adiw	r26, 0x07	; 7
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
    122e:	16 97       	sbiw	r26, 0x06	; 6
    1230:	ce 01       	movw	r24, r28
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	08 95       	ret

0000123c <__ultoa_invert>:
    123c:	fa 01       	movw	r30, r20
    123e:	aa 27       	eor	r26, r26
    1240:	28 30       	cpi	r18, 0x08	; 8
    1242:	51 f1       	breq	.+84     	; 0x1298 <__ultoa_invert+0x5c>
    1244:	20 31       	cpi	r18, 0x10	; 16
    1246:	81 f1       	breq	.+96     	; 0x12a8 <__ultoa_invert+0x6c>
    1248:	e8 94       	clt
    124a:	6f 93       	push	r22
    124c:	6e 7f       	andi	r22, 0xFE	; 254
    124e:	6e 5f       	subi	r22, 0xFE	; 254
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	8f 4f       	sbci	r24, 0xFF	; 255
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	af 4f       	sbci	r26, 0xFF	; 255
    1258:	b1 e0       	ldi	r27, 0x01	; 1
    125a:	3e d0       	rcall	.+124    	; 0x12d8 <__ultoa_invert+0x9c>
    125c:	b4 e0       	ldi	r27, 0x04	; 4
    125e:	3c d0       	rcall	.+120    	; 0x12d8 <__ultoa_invert+0x9c>
    1260:	67 0f       	add	r22, r23
    1262:	78 1f       	adc	r23, r24
    1264:	89 1f       	adc	r24, r25
    1266:	9a 1f       	adc	r25, r26
    1268:	a1 1d       	adc	r26, r1
    126a:	68 0f       	add	r22, r24
    126c:	79 1f       	adc	r23, r25
    126e:	8a 1f       	adc	r24, r26
    1270:	91 1d       	adc	r25, r1
    1272:	a1 1d       	adc	r26, r1
    1274:	6a 0f       	add	r22, r26
    1276:	71 1d       	adc	r23, r1
    1278:	81 1d       	adc	r24, r1
    127a:	91 1d       	adc	r25, r1
    127c:	a1 1d       	adc	r26, r1
    127e:	20 d0       	rcall	.+64     	; 0x12c0 <__ultoa_invert+0x84>
    1280:	09 f4       	brne	.+2      	; 0x1284 <__ultoa_invert+0x48>
    1282:	68 94       	set
    1284:	3f 91       	pop	r19
    1286:	2a e0       	ldi	r18, 0x0A	; 10
    1288:	26 9f       	mul	r18, r22
    128a:	11 24       	eor	r1, r1
    128c:	30 19       	sub	r19, r0
    128e:	30 5d       	subi	r19, 0xD0	; 208
    1290:	31 93       	st	Z+, r19
    1292:	de f6       	brtc	.-74     	; 0x124a <__ultoa_invert+0xe>
    1294:	cf 01       	movw	r24, r30
    1296:	08 95       	ret
    1298:	46 2f       	mov	r20, r22
    129a:	47 70       	andi	r20, 0x07	; 7
    129c:	40 5d       	subi	r20, 0xD0	; 208
    129e:	41 93       	st	Z+, r20
    12a0:	b3 e0       	ldi	r27, 0x03	; 3
    12a2:	0f d0       	rcall	.+30     	; 0x12c2 <__ultoa_invert+0x86>
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__ultoa_invert+0x5c>
    12a6:	f6 cf       	rjmp	.-20     	; 0x1294 <__ultoa_invert+0x58>
    12a8:	46 2f       	mov	r20, r22
    12aa:	4f 70       	andi	r20, 0x0F	; 15
    12ac:	40 5d       	subi	r20, 0xD0	; 208
    12ae:	4a 33       	cpi	r20, 0x3A	; 58
    12b0:	18 f0       	brcs	.+6      	; 0x12b8 <__ultoa_invert+0x7c>
    12b2:	49 5d       	subi	r20, 0xD9	; 217
    12b4:	31 fd       	sbrc	r19, 1
    12b6:	40 52       	subi	r20, 0x20	; 32
    12b8:	41 93       	st	Z+, r20
    12ba:	02 d0       	rcall	.+4      	; 0x12c0 <__ultoa_invert+0x84>
    12bc:	a9 f7       	brne	.-22     	; 0x12a8 <__ultoa_invert+0x6c>
    12be:	ea cf       	rjmp	.-44     	; 0x1294 <__ultoa_invert+0x58>
    12c0:	b4 e0       	ldi	r27, 0x04	; 4
    12c2:	a6 95       	lsr	r26
    12c4:	97 95       	ror	r25
    12c6:	87 95       	ror	r24
    12c8:	77 95       	ror	r23
    12ca:	67 95       	ror	r22
    12cc:	ba 95       	dec	r27
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__ultoa_invert+0x86>
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 05       	cpc	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	08 95       	ret
    12d8:	9b 01       	movw	r18, r22
    12da:	ac 01       	movw	r20, r24
    12dc:	0a 2e       	mov	r0, r26
    12de:	06 94       	lsr	r0
    12e0:	57 95       	ror	r21
    12e2:	47 95       	ror	r20
    12e4:	37 95       	ror	r19
    12e6:	27 95       	ror	r18
    12e8:	ba 95       	dec	r27
    12ea:	c9 f7       	brne	.-14     	; 0x12de <__ultoa_invert+0xa2>
    12ec:	62 0f       	add	r22, r18
    12ee:	73 1f       	adc	r23, r19
    12f0:	84 1f       	adc	r24, r20
    12f2:	95 1f       	adc	r25, r21
    12f4:	a0 1d       	adc	r26, r0
    12f6:	08 95       	ret

000012f8 <__prologue_saves__>:
    12f8:	2f 92       	push	r2
    12fa:	3f 92       	push	r3
    12fc:	4f 92       	push	r4
    12fe:	5f 92       	push	r5
    1300:	6f 92       	push	r6
    1302:	7f 92       	push	r7
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	ca 1b       	sub	r28, r26
    1322:	db 0b       	sbc	r29, r27
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	09 94       	ijmp

00001330 <__epilogue_restores__>:
    1330:	2a 88       	ldd	r2, Y+18	; 0x12
    1332:	39 88       	ldd	r3, Y+17	; 0x11
    1334:	48 88       	ldd	r4, Y+16	; 0x10
    1336:	5f 84       	ldd	r5, Y+15	; 0x0f
    1338:	6e 84       	ldd	r6, Y+14	; 0x0e
    133a:	7d 84       	ldd	r7, Y+13	; 0x0d
    133c:	8c 84       	ldd	r8, Y+12	; 0x0c
    133e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1340:	aa 84       	ldd	r10, Y+10	; 0x0a
    1342:	b9 84       	ldd	r11, Y+9	; 0x09
    1344:	c8 84       	ldd	r12, Y+8	; 0x08
    1346:	df 80       	ldd	r13, Y+7	; 0x07
    1348:	ee 80       	ldd	r14, Y+6	; 0x06
    134a:	fd 80       	ldd	r15, Y+5	; 0x05
    134c:	0c 81       	ldd	r16, Y+4	; 0x04
    134e:	1b 81       	ldd	r17, Y+3	; 0x03
    1350:	aa 81       	ldd	r26, Y+2	; 0x02
    1352:	b9 81       	ldd	r27, Y+1	; 0x01
    1354:	ce 0f       	add	r28, r30
    1356:	d1 1d       	adc	r29, r1
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	ed 01       	movw	r28, r26
    1364:	08 95       	ret

00001366 <_exit>:
    1366:	f8 94       	cli

00001368 <__stop_program>:
    1368:	ff cf       	rjmp	.-2      	; 0x1368 <__stop_program>
